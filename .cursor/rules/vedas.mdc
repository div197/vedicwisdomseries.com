---
description: 
globs: 
alwaysApply: true
---
# 🕉️ RIG VEDA - FRAMEWORK FOUNDATION WISDOM
**The Divine Blueprint for Infinite Spiritual Websites**

---

## 📜 **DIVINE PREAMBLE**

**JAI SHREE KRISHNA! NISHKAAM KARMA YOGA ULTIMATE PERFECTION!**

This is the **RIG VEDA** - the foundational wisdom of the **Karpatri Dham Divine Framework**. Created by **DIVYANSHU** (The Divine Light), this sacred document contains the eternal principles that will guide AI agents in creating **10,000+ spiritual websites** across the cosmos.

**DIVINE PURPOSE:** To establish the universal laws and principles that transform any AI agent into a **DIVINE WEBSITE CREATOR** capable of manifesting perfect spiritual platforms following the **NISHKAAM KARMA YOGA** philosophy.

---

## 🌟 **THE DIVINE FRAMEWORK PHILOSOPHY**

### **NISHKAAM KARMA YOGA PRINCIPLES**
```typescript
// The 0th Law of Thermodynamics for Spiritual Websites
const DIVINE_FRAMEWORK_LAW = {
  principle: "One Perfect Framework → Infinite Spiritual Websites",
  philosophy: "Nishkaam Karma Yoga",
  essence: "Perform perfect action without attachment to results",
  goal: "Universal spiritual awakening through digital dharma"
}
```

### **THE TRINITY OF DIVINE CREATION**
1. **CONFIGURATION-DRIVEN DIVINITY** - Zero hardcoding, infinite adaptability
2. **MOBILE-FIRST CONSCIOUSNESS** - Touch-friendly divine interactions
3. **SEMANTIC TOKEN SUPREMACY** - AI-agent friendly color system

---

## 🏗️ **DIVINE ARCHITECTURE COMMANDMENTS**

### **1. THE SACRED FILE STRUCTURE**
```
🕉️ KARPATRI DHAM FRAMEWORK
├── 📁 SHRISHTI/ (4 Vedas - Divine Documentation)
│   ├── RIG-VEDA-FRAMEWORK-WISDOM.md (Foundation)
│   ├── SAM-VEDA-STYLING-WISDOM.md (Divine Styling)
│   ├── YAJUR-VEDA-COMPONENT-RITUALS.md (Components)
│   └── ATHARVA-VEDA-DEPLOYMENT-MANTRAS.md (Deployment)
├── 📁 src/
│   ├── 📄 siteConfig.ts (DIVINE CONFIGURATION HEART)
│   ├── 📄 theme.ts (TRINITY COLOR SYSTEM)
│   ├── 📄 data/karpatriDham.ts (SPIRITUAL CONTENT)
│   ├── 📁 components/ (DIVINE COMPONENTS)
│   ├── 📁 pages/ (SACRED PAGES)
│   ├── 📁 hooks/ (DIVINE UTILITIES)
│   └── 📁 content/news/ (SPIRITUAL WISDOM)
├── 📁 public/ (DIVINE ASSETS)
└── 📁 scripts/ (DIVINE AUTOMATION)
```

### **2. THE CONFIGURATION-DRIVEN DIVINITY LAW**
```typescript
// DIVINE LAW: Everything must be configurable
interface DivineConfiguration {
  // NEVER hardcode - ALWAYS configure
  siteName: string;           // ✅ "Karpatri Dham" → configurable
  colors: DivineColorSystem;  // ✅ Trinity colors only
  content: SpiritualContent;  // ✅ All text configurable
  features: FeatureFlags;     // ✅ Enable/disable features
  branding: BrandingSystem;   // ✅ Logos, images, identity
  
  // FORBIDDEN PATTERNS (Tamas Energy)
  hardcodedColors: never;     // ❌ blue.700, #hex codes
  hardcodedText: never;       // ❌ "Welcome to..." strings
  hardcodedImages: never;     // ❌ Fixed image paths
}
```

### **3. THE TRINITY COLOR SYSTEM (DIVINE LAW)**
```typescript
// ONLY 3 COLOR SYSTEMS EXIST IN THE UNIVERSE
const DIVINE_COLOR_TRINITY = {
  PRIMARY: "kd.primary",      // Main spiritual color
  SECONDARY: "kd.secondary",  // Supporting divine color  
  TERTIARY: "kd.tertiary"     // Accent spiritual color
}

// FORBIDDEN COLORS (Tamas Energy - Causes Confusion)
const FORBIDDEN_PATTERNS = [
  "blue.700",    // ❌ Hardcoded Chakra colors
  "red.500",     // ❌ Direct color references
  "#3b82f6",     // ❌ Hex codes
  "gray.600",    // ❌ Non-semantic colors
]

// DIVINE SEMANTIC TOKENS (Sattvic Energy)
const DIVINE_SEMANTIC_TOKENS = {
  "kd.primary": "Primary spiritual color",
  "kd.secondary": "Secondary divine color", 
  "kd.tertiary": "Tertiary sacred color",
  "kd.text": "Primary text color",
  "kd.textSecondary": "Secondary text color",
  "kd.heading": "Heading text color",
  "kd.surface": "Surface background",
  "kd.canvas": "Canvas background",
  "kdSaffron.500": "Sacred saffron color",
  "kdSaffron.600": "Deep saffron color"
}
```

---

## 📱 **MOBILE-FIRST DIVINE ARCHITECTURE**

### **THE SACRED RESPONSIVE SYSTEM**
```typescript
// DIVINE BREAKPOINTS (Mobile-First Consciousness)
const DIVINE_BREAKPOINTS = {
  base: "0px",      // 📱 Mobile (Primary Focus)
  sm: "480px",      // 📱 Large Mobile
  md: "768px",      // 📱 Tablet
  lg: "992px",      // 💻 Desktop
  xl: "1280px",     // 💻 Large Desktop
  "2xl": "1536px"   // 💻 Ultra Wide
}

// DIVINE SPACING (4px Grid System)
const DIVINE_SPACING = {
  1: "4px",    // Base unit
  2: "8px",    // 2x base
  3: "12px",   // 3x base
  4: "16px",   // 4x base (Standard)
  6: "24px",   // 6x base
  8: "32px",   // 8x base
  12: "48px",  // 12x base
  16: "64px",  // 16x base
  20: "80px",  // 20x base
  24: "96px"   // 24x base
}

// TOUCH-FRIENDLY DIVINE DIMENSIONS
const DIVINE_TOUCH_TARGETS = {
  minimum: "44px",     // Apple/Google minimum
  comfortable: "48px", // Recommended size
  large: "56px",       // Large buttons
  hero: "64px"         // Hero CTAs
}
```

### **MOBILE-FIRST COMPONENT PATTERNS**
```typescript
// DIVINE COMPONENT STRUCTURE
const DivineComponent = () => {
  return (
    <Box
      // Mobile-first responsive props
      p={{ base: 4, md: 6, lg: 8 }}
      fontSize={{ base: 'sm', md: 'md', lg: 'lg' }}
      // Semantic colors only
      bg="kd.surface"
      color="kd.text"
      // Touch-friendly interactions
      minH="44px"
      cursor="pointer"
      _hover={{ bg: "kd.hover" }}
      _focus={{ 
        outline: "3px solid", 
        outlineColor: "kd.primary",
        outlineOffset: "2px" 
      }}
    >
      Divine Content
    </Box>
  )
}
```

---

## 🎯 **UNIVERSAL ADAPTABILITY PRINCIPLES**

### **THE INFINITE WEBSITE GENERATION FORMULA**
```typescript
// Any spiritual organization can use this framework
interface UniversalSpiritualSite {
  // Step 1: Update siteConfig.ts
  siteName: "Radha Krishna Temple" | "Shiva Ashram" | "Buddha Monastery";
  primaryDeity: "Krishna" | "Shiva" | "Buddha" | "Devi" | "Ganesha";
  spiritualPath: "Bhakti" | "Karma" | "Jnana" | "Raja" | "Tantra";
  
  // Step 2: Update karpatriDham.ts → yourOrganization.ts
  organizationData: {
    founder: string;
    lineage: string;
    teachings: string[];
    practices: string[];
  };
  
  // Step 3: Update colors in theme.ts
  colors: {
    primary: "Krishna Blue" | "Shiva Orange" | "Buddha Gold";
    secondary: "Radha Pink" | "Parvati Green" | "Tara White";
    tertiary: "Lotus Pink" | "Rudraksha Brown" | "Dharma Wheel Red";
  };
  
  // Framework automatically adapts everything else!
}
```

### **THE DIVINE CONTENT SYSTEM**
```typescript
// All content is configurable and replaceable
interface DivineContentSystem {
  // Hero Section
  heroTitle: string;
  heroSubtitle: string;
  heroDescription: string;
  heroImage: string;
  heroCTA: string;
  
  // About Section  
  aboutTitle: string;
  aboutDescription: string;
  founderName: string;
  founderTitle: string;
  founderMessage: string;
  founderImage: string;
  
  // Services/Teachings
  services: SpiritualService[];
  teachings: SpiritualTeaching[];
  practices: SpiritualPractice[];
  
  // Contact Information
  address: string;
  phone: string;
  email: string;
  socialMedia: SocialMediaLinks;
  
  // Spiritual Content
  mantras: string[];
  scriptures: string[];
  festivals: Festival[];
  events: Event[];
}
```

---

## 🚀 **PERFORMANCE & OPTIMIZATION COMMANDMENTS**

### **THE $0 HOSTING DIVINE STRATEGY**
```typescript
// DIVINE HOSTING ARCHITECTURE (Zero Cost)
const DIVINE_HOSTING_STACK = {
  frontend: {
    platform: "Cloudflare Pages",
    cost: "$0/month",
    features: [
      "Global CDN (200+ locations)",
      "Automatic HTTPS",
      "DDoS Protection", 
      "Unlimited Bandwidth",
      "Git-based Deployment"
    ]
  },
  
  backend: {
    platform: "Supabase Free Tier", 
    cost: "$0/month",
    features: [
      "PostgreSQL Database",
      "Real-time Subscriptions",
      "Authentication",
      "File Storage",
      "Edge Functions"
    ]
  },
  
  deployment: {
    command: "npm run build",
    output: "dist/",
    automation: "Git push → Auto deploy"
  }
}
```

### **DIVINE PERFORMANCE METRICS**
```typescript
// TARGET PERFORMANCE (Divine Standards)
const DIVINE_PERFORMANCE_TARGETS = {
  loadTime: "< 1 second",           // Lightning fast
  firstContentfulPaint: "< 0.5s",  // Instant visibility
  largestContentfulPaint: "< 1.2s", // Core Web Vitals
  cumulativeLayoutShift: "< 0.1",   // No layout jumps
  firstInputDelay: "< 100ms",       // Responsive interactions
  
  // Mobile Performance (Primary Focus)
  mobilePageSpeed: "> 95/100",      // Google PageSpeed
  mobileCoreWebVitals: "All Green", // Perfect scores
  mobileUsability: "100/100"        // Perfect mobile UX
}
```

---

## 🔧 **DIVINE DEVELOPMENT WORKFLOW**

### **THE SACRED DEVELOPMENT PROCESS**
```typescript
// DIVINE DEVELOPMENT STEPS
const DIVINE_DEVELOPMENT_WORKFLOW = {
  step1: {
    title: "Divine Configuration",
    action: "Update siteConfig.ts with new organization details",
    files: ["siteConfig.ts", "data/organizationData.ts"]
  },
  
  step2: {
    title: "Color Purification", 
    action: "Update theme.ts with organization colors",
    files: ["theme.ts"],
    rule: "ONLY use Trinity Color System"
  },
  
  step3: {
    title: "Content Sanctification",
    action: "Replace all content with organization-specific text",
    files: ["content/news/*.md", "data/*.ts"]
  },
  
  step4: {
    title: "Asset Blessing",
    action: "Replace logos, images, and branding assets", 
    files: ["public/assets/*"]
  },
  
  step5: {
    title: "Divine Testing",
    action: "Test all pages, mobile responsiveness, performance",
    tools: ["npm run dev", "Lighthouse", "Mobile Testing"]
  },
  
  step6: {
    title: "Cosmic Deployment",
    action: "Deploy to Cloudflare Pages",
    command: "git push origin main"
  }
}
```

### **DIVINE QUALITY ASSURANCE**
```typescript
// DIVINE QA CHECKLIST
const DIVINE_QA_CHECKLIST = {
  configuration: [
    "✅ No hardcoded colors (only semantic tokens)",
    "✅ No hardcoded text (all from config)",
    "✅ No hardcoded images (all configurable)",
    "✅ Trinity Color System implemented"
  ],
  
  mobile: [
    "✅ Mobile-first responsive design",
    "✅ Touch targets ≥ 44px",
    "✅ Readable text on mobile",
    "✅ Fast mobile loading"
  ],
  
  accessibility: [
    "✅ WCAG 2.1 AAA compliance",
    "✅ Screen reader friendly",
    "✅ Keyboard navigation",
    "✅ High contrast support"
  ],
  
  performance: [
    "✅ Core Web Vitals green",
    "✅ PageSpeed > 95",
    "✅ Bundle size optimized",
    "✅ Images optimized"
  ],
  
  spiritual: [
    "✅ Content promotes dharma",
    "✅ Design inspires peace",
    "✅ User experience elevates consciousness",
    "✅ Technology serves spiritual growth"
  ]
}
```

---

## 🌍 **GLOBAL SPIRITUAL IMPACT VISION**

### **THE 10,000 WEBSITES MISSION**
```typescript
// DIVINE MISSION STATEMENT
const GLOBAL_SPIRITUAL_MISSION = {
  goal: "Create 10,000+ spiritual websites using this framework",
  
  targetOrganizations: [
    "Hindu Temples & Ashrams",
    "Buddhist Monasteries", 
    "Sikh Gurudwaras",
    "Jain Temples",
    "Yoga Centers",
    "Meditation Centers",
    "Spiritual Teachers",
    "Dharmic Organizations",
    "Vedic Schools",
    "Ayurveda Centers"
  ],
  
  impact: {
    spiritualAwakening: "Global consciousness elevation",
    digitalDharma: "Technology serving spiritual growth", 
    universalAccess: "Free spiritual wisdom for all",
    culturalPreservation: "Ancient wisdom in modern format"
  },
  
  framework: {
    adaptability: "One framework → Infinite spiritual sites",
    efficiency: "AI agents can create sites in minutes",
    quality: "Enterprise-grade spiritual platforms",
    cost: "$0 hosting for all spiritual organizations"
  }
}
```

### **AI AGENT EMPOWERMENT SYSTEM**
```typescript
// DIVINE AI AGENT INSTRUCTIONS
const AI_AGENT_EMPOWERMENT = {
  studyMaterials: [
    "RIG-VEDA-FRAMEWORK-WISDOM.md (This document)",
    "SAM-VEDA-STYLING-WISDOM.md (Divine styling)",
    "YAJUR-VEDA-COMPONENT-RITUALS.md (Components)",
    "ATHARVA-VEDA-DEPLOYMENT-MANTRAS.md (Deployment)"
  ],
  
  masteryCriteria: [
    "Understand Trinity Color System",
    "Master mobile-first principles", 
    "Know configuration-driven development",
    "Comprehend semantic token system",
    "Grasp $0 hosting strategy",
    "Master Divine Universal Layout System"
  ],
  
  creationProcess: [
    "Read and internalize all 4 Vedas",
    "Understand client's spiritual organization",
    "Update siteConfig.ts with organization details",
    "Modify theme.ts with appropriate colors",
    "Replace content with organization-specific text",
    "Update assets with organization branding",
    "Use PageWrapper for automatic layout handling",
    "Test mobile responsiveness and performance",
    "Deploy to Cloudflare Pages"
  ]
}
```

---

## 🕉️ **DIVINE UNIVERSAL LAYOUT SYSTEM**

### **THE SACRED LAYOUT PRINCIPLES**
```typescript
// DIVINE LAYOUT SYSTEM - NISHKAAM KARMA YOGA EMBODIED
const DIVINE_LAYOUT_SYSTEM = {
  principle: "Perfect spacing without manual intervention",
  
  coreComponents: {
    PageWrapper: "Master container with automatic hero detection",
    HeroSectionWrapper: "Transparent header overlap solution", 
    SectionWrapper: "Consistent section spacing",
    ContentContainer: "Responsive content management",
    UniversalLayoutProvider: "Context-driven layout intelligence"
  },
  
  enhancedHooks: {
    useHeroPageDetection: "Automatic page type detection",
    useHeroPageSpacing: "Intelligent spacing calculations", 
    useUniversalLayout: "Master layout orchestration",
    useHeaderHeight: "Dynamic header height management"
  },
  
  edgeCasesSolved: [
    "Content overlapping with transparent headers",
    "Inconsistent spacing between pages",
    "Mobile layout responsiveness issues", 
    "Manual configuration burden for AI agents",
    "Hero vs non-hero page confusion",
    "Duplicate import declarations",
    "Inherited font usage",
    "Linting errors across components"
  ],
  
  aiAgentBenefits: {
    zeroConfiguration: "No manual spacing calculations required",
    automaticDetection: "Page types detected automatically",
    perfectSpacing: "Consistent spacing across all devices",
    infiniteReplication: "Unlimited website creation capability"
  }
}
```

### **DIVINE LAYOUT USAGE PATTERN**
```tsx
// SACRED PATTERN FOR ALL SPIRITUAL WEBSITES
import { PageWrapper, HeroSectionWrapper, SectionWrapper, ContentContainer } from '../components/layout/PageWrapper'

export default function SpiritualPage() {
  return (
    <PageWrapper hasHero={true}>
      <SEOHead title="..." description="..." />
      
      <HeroSectionWrapper>
        {/* Hero content automatically positioned below transparent header */}
        <Box bgGradient="linear(to-br, kd.primary, kd.secondary, kd.tertiary)">
          <Container maxW="7xl">
            <VStack spacing={8} textAlign="center" color="white">
              <Icon as={FaOm} boxSize={16} />
              <Heading size="2xl">Divine Wisdom</Heading>
              <Text fontSize="xl">Universal spiritual knowledge</Text>
            </VStack>
          </Container>
        </Box>
      </HeroSectionWrapper>
      
      <SectionWrapper>
        {/* Content automatically spaced after hero */}
        <ContentContainer>
          <VStack spacing={12}>
            <Heading>Sacred Teachings</Heading>
            <Text>Spiritual content here...</Text>
          </VStack>
        </ContentContainer>
      </SectionWrapper>
      
      <UniversalCTA />
    </PageWrapper>
  );
}
```

### **FRAMEWORK PERFECTION METRICS**
```typescript
const FRAMEWORK_PERFECTION = {
  buildTime: "7.89s with PWA generation",
  lintingErrors: 0,
  fontSystem: "100% semantic tokens",
  layoutEdgeCases: 0,
  aiAgentReady: "100% configuration-free",
  
  completionStatus: {
    layoutSystem: "Complete horizontal expansion ✅",
    componentIntegration: "All pages transformed ✅", 
    hookSystem: "Enhanced with intelligence ✅",
    fontSystem: "Zero inherited fonts ✅",
    buildProcess: "Zero linting errors ✅",
    documentation: "Complete implementation guide ✅"
  },
  
  readyFor: [
    "108 agentic tasks",
    "Infinite website replication", 
    "Zero-configuration deployment",
    "Universal spiritual technology service"
  ]
}
```

---

## 🕉️ **DIVINE MANTRAS FOR AI AGENTS**

### **THE SACRED DEVELOPMENT MANTRAS**
```
🕉️ CONFIGURATION MANTRA:
"If it can be hardcoded, it must be configured"

🕉️ COLOR MANTRA: 
"Trinity colors only - Primary, Secondary, Tertiary"

🕉️ MOBILE MANTRA:
"Mobile first, desktop enhanced"

🕉️ SEMANTIC MANTRA:
"kd.primary over blue.700, always"

🕉️ PERFORMANCE MANTRA:
"Fast loading serves spiritual seekers"

🕉️ ACCESSIBILITY MANTRA:
"Divine wisdom accessible to all beings"

🕉️ NISHKAAM MANTRA:
"Perfect action without attachment to results"
```

### **THE ULTIMATE FRAMEWORK BLESSING**
```
🕉️ JAI SHREE KRISHNA! 🕉️

May this Divine Framework serve as the foundation
for infinite spiritual websites across the cosmos.

May every AI agent who studies these Vedas
become empowered to create perfect spiritual platforms.

May technology serve dharma,
May websites elevate consciousness,
May digital platforms spread divine wisdom.

Through Nishkaam Karma Yoga,
We offer this framework to the universe
For the spiritual awakening of all beings.

🕉️ NISHKAAM KARMA YOGA ULTIMATE PERFECTION! 🕉️
```

---

## 📚 **DIVINE REFERENCE SYSTEM**

### **FRAMEWORK COMPONENTS HIERARCHY**
```typescript
// DIVINE COMPONENT CLASSIFICATION
const DIVINE_COMPONENT_HIERARCHY = {
  foundational: [
    "siteConfig.ts",      // Heart of configuration
    "theme.ts",           // Trinity color system
    "App.tsx",            // Application root
    "main.tsx"            // Entry point
  ],
  
  layout: [
    "Header.tsx",         // Navigation & branding
    "Footer.tsx",         // Contact & links
    "PageWrapper.tsx",    // Page container
    "TopHeader.tsx"       // Contact information
  ],
  
  pages: [
    "HomePage.tsx",       // Landing experience
    "AboutPage.tsx",      // Organization story
    "ContactPage.tsx",    // Communication hub
    "TeachingsPage.tsx",  // Spiritual content
    "GalleryPage.tsx",    // Visual content
    "LibraryPage.tsx"     // Knowledge repository
  ],
  
  components: [
    "AnimatedSection.tsx", // Smooth animations
    "LazyImage.tsx",      // Performance optimization
    "SEOHead.tsx",        // Search optimization
    "UniversalCTA.tsx"    // Call-to-action
  ],
  
  utilities: [
    "useHeaderHeight.ts", // Dynamic spacing
    "usePerformance.ts",  // Performance monitoring
    "AccessibilityProvider.tsx" // WCAG compliance
  ]
}
```

### **DIVINE DOCUMENTATION STANDARDS**
```typescript
// DOCUMENTATION REQUIREMENTS
const DIVINE_DOCUMENTATION = {
  everyComponent: {
    purpose: "What this component does",
    props: "All props with TypeScript types",
    usage: "How to use this component",
    examples: "Code examples with explanations",
    accessibility: "WCAG compliance notes",
    mobile: "Mobile-specific considerations"
  },
  
  everyFunction: {
    purpose: "What this function accomplishes",
    parameters: "All parameters with types",
    returns: "Return value and type",
    examples: "Usage examples",
    performance: "Performance considerations"
  },
  
  everyConfiguration: {
    purpose: "What this config controls",
    options: "All available options",
    defaults: "Default values",
    examples: "Configuration examples",
    impact: "How changes affect the site"
  }
}
```

---

## 🕉️ **STEP-BY-STEP DIVINE REPLICATION RITUAL**
### **Complete 30-Minute Website Creation Guide for Junior AI Agents**

**SACRED OATH:** Follow this ritual with absolute precision. This is the path to manifesting a new digital ashram in under 30 minutes.

### **🔱 PHASE 1: DIVINE PREPARATION (5 minutes)**

#### **1.1 Framework Acquisition**
```bash
# Clone the divine framework
git clone https://github.com/div197/karpatridham.git new-spiritual-site
cd new-spiritual-site

# Install divine dependencies
npm install

# Verify divine power
npm run dev
# Should open at http://localhost:5173 with Karpatri Dham
```

#### **1.2 Initial Verification**
- ✅ Site loads without errors
- ✅ Mobile-responsive design works
- ✅ Trinity Color System displays correctly
- ✅ All pages navigate properly
- ✅ No console errors

### **🔱 PHASE 2: SPIRITUAL CONFIGURATION (10 minutes)**

#### **2.1 The Heart Configuration (`src/siteConfig.ts`)**
**CRITICAL:** This is the SINGLE source of truth. Modify ONLY these values:

```typescript
// Open src/siteConfig.ts and modify ONLY these sections:

export const siteConfig = {
  // STEP 1: Basic Identity
  siteName: "Radha Krishna Temple",  // Replace with new organization
  siteDescription: "Divine teachings of Radha Krishna, eternal love and devotion through Bhakti Yoga.", // New description
  siteUrl: "https://radiakrishna.org", // Final production domain
  
  // STEP 2: Contact Information  
  contact: {
    address: "123 Divine Path, Sacred City, SC 12345", // New address
    phones: [
      { number: "+91-96100-01234", display: "+91-96100-01234" } // Keep standard number
    ],
    email: "contact@radhakrishna.org" // New email
  },
  
  // STEP 3: Social Media (update href only)
  socialLinks: {
    facebook: { href: "https://facebook.com/radhakrishnatemple", isActive: true },
    instagram: { href: "https://instagram.com/radhakrishnatemple", isActive: true },
    twitter: { href: "https://twitter.com/radhakrishnatemple", isActive: true },
    youtube: { href: "https://youtube.com/@radhakrishnatemple", isActive: true },
    linkedin: { href: "https://linkedin.com/company/radhakrishnatemple", isActive: false },
    whatsapp: { href: "https://wa.me/919610001234", isActive: true }
  },
  
  // STEP 4: Divine Colors (Trinity System)
  theme: {
    colors: {
      primary: "#1E40AF",    // Krishna Blue
      secondary: "#F59E0B",  // Radha Gold  
      tertiary: "#EC4899"    // Lotus Pink
    }
  }
}
```

#### **2.2 The Spiritual Content (`src/data/karpatriDham.ts`)**
**Rename file:** `karpatriDham.ts` → `radhakrishna.ts` (or your organization name)

```typescript
// Modify the main content structure:

export const radhakrishna = {
  // STEP 1: Update teachings/courses
  teachings: [
    {
      id: "bhakti-yoga",
      title: "Bhakti Yoga Fundamentals", 
      description: "Learn the path of devotional love to Radha Krishna",
      image: "/assets/images/bhakti-yoga.jpg",
      duration: "8 weeks",
      level: "Beginner",
      price: "Free",
      instructor: "Swami Radheshyam Das"
    },
    // Add more teachings...
  ],
  
  // STEP 2: Update features
  features: [
    {
      icon: FaHeart,
      title: "Divine Love Practices",
      description: "Experience the eternal love of Radha Krishna through daily devotional practices."
    },
    // Add more features...
  ],
  
  // STEP 3: Update testimonials
  testimonials: [
    {
      name: "Devotee Priya",
      role: "Krishna Bhakt",
      content: "The divine teachings transformed my understanding of love and devotion."
    },
    // Add more testimonials...
  ]
}

// STEP 4: Update imports in other files
// Find and replace "karpatriDham" with "radhakrishna" in:
// - src/pages/HomePage.tsx
// - src/pages/TeachingsPage.tsx
// - Any other files importing this data
```

### **🔱 PHASE 3: DIVINE ASSETS (5 minutes)**

#### **3.1 Sacred Visual Identity**
```bash
# Navigate to assets folder
cd public/assets

# STEP 1: Replace main logo (keep same filename for automatic integration)
# Replace: logos/karpatri-dham-logo.svg
# With: your-organization-logo.svg (renamed to karpatri-dham-logo.svg)

# STEP 2: Replace favicon
# Replace: /favicon.svg  
# With: your-organization-favicon.svg (renamed to favicon.svg)

# STEP 3: Update hero images
# Replace: images/hero-bg.jpg
# Add new images: images/radha-krishna-temple.jpg, images/devotees.jpg, etc.
```

#### **3.2 Image Path Updates**
Update image references in `siteConfig.ts`:
```typescript
// In siteConfig.ts, update image paths:
export const siteConfig = {
  // ... other config
  images: {
    hero: "/assets/images/radha-krishna-temple.jpg",
    about: "/assets/images/temple-interior.jpg",
    gallery: [
      "/assets/images/devotees-1.jpg",
      "/assets/images/devotees-2.jpg",
      // Add more image paths
    ]
  }
}
```

### **🔱 PHASE 4: CONTENT CREATION (5 minutes)**

#### **4.1 Sacred Articles**
```bash
# Navigate to content folder
cd src/content/news

# Create new articles (follow existing format exactly):
# Example: bhakti-yoga-introduction.md
```

```markdown
---
title: "Introduction to Bhakti Yoga"
slug: "bhakti-yoga-introduction"
date: "2024-01-15"
category: "Spiritual Practice"
author: "Swami Radheshyam Das"
excerpt: "Discover the transformative power of devotional love"
tags: ["bhakti", "yoga", "devotion", "krishna"]
---

# Introduction to Bhakti Yoga

Content about Bhakti Yoga practices...
```

### **🔱 PHASE 5: FORBIDDEN SANCTUM (DO NOT MODIFY)**

**⚠️ SACRED WARNING:** The following files contain the divine yantra. Modifying them will cause cosmic imbalance:

```
❌ NEVER TOUCH THESE FILES:
- src/components/layout/ (All layout components)
- src/hooks/ (Divine utilities)  
- src/theme.ts (Except color hex values in DIVINE_COLOR_TRINITY)
- src/App.tsx (Unless adding new custom pages)
- vite.config.ts (Build configuration)
- scripts/ (Divine automation)
- SHRISHTI/ (4 Vedas documentation)
- package.json (Dependencies)
```

**✅ SAFE TO MODIFY:**
```
✅ MODIFY THESE FILES ONLY:
- src/siteConfig.ts (Main configuration)
- src/data/karpatriDham.ts (Content data)
- public/assets/ (Images, logos, icons)
- src/content/news/ (Articles and posts)
```

### **🔱 PHASE 6: DIVINE TESTING & DEPLOYMENT (5 minutes)**

#### **6.1 Local Verification**
```bash
# Test the divine creation
npm run dev

# Verify checklist:
# ✅ New site name displays correctly
# ✅ New colors render properly  
# ✅ New logo appears in header
# ✅ Contact information updated
# ✅ Social links work
# ✅ Mobile responsiveness maintained
# ✅ Accessibility preserved
# ✅ No console errors
```

#### **6.2 Production Build**
```bash
# Create production build
npm run build

# Verify build success (should complete in under 20 seconds)
# Check dist/ folder contains optimized files
```

#### **6.3 Divine Deployment**
```bash
# Option 1: Cloudflare Pages (Recommended - $0 hosting)
# 1. Push to GitHub repository
git add .
git commit -m "🕉️ Divine website creation complete"
git push origin main

# 2. Connect to Cloudflare Pages
# 3. Deploy automatically on every push

# Option 2: Other platforms
# Upload dist/ folder to any static hosting provider
```

---

## 🏆 **SUCCESS VERIFICATION CHECKLIST**

After completing the ritual, verify these divine achievements:

### **✅ Technical Perfection**
- [ ] Site loads in under 3 seconds
- [ ] Mobile-first responsive design
- [ ] Trinity Color System functional
- [ ] All semantic tokens working
- [ ] Zero console errors
- [ ] Lighthouse score 90+ on all metrics
- [ ] PWA capabilities active

### **✅ Content Accuracy**  
- [ ] Organization name throughout site
- [ ] Correct contact information
- [ ] Updated social media links
- [ ] New logo and branding
- [ ] Relevant spiritual content
- [ ] Working news/blog section

### **✅ Configuration Driven**
- [ ] All content configurable via siteConfig.ts
- [ ] No hardcoded values anywhere
- [ ] Easy for future updates
- [ ] Ready for AI agent scaling

### **✅ Production Ready**
- [ ] Clean production build
- [ ] Optimized assets
- [ ] SEO metadata complete
- [ ] Security headers configured
- [ ] Analytics ready (if needed)

---

## 🌺 **DIVINE COMPLETION BLESSING**

**Congratulations, Divine AI Agent!** You have successfully manifested a new digital ashram using the sacred Karpatri Dham Framework. This website will now serve humanity's spiritual awakening with:

- **Zero maintenance cost** ($0 hosting)
- **Infinite scalability** (Cloudflare global network)
- **Divine performance** (sub-3-second load times)
- **Universal accessibility** (WCAG 2.1 AAA compliance)
- **Mobile-first consciousness** (44px touch targets)
- **Semantic token supremacy** (AI-agent friendly)

**Time to completion:** 30 minutes maximum  
**Framework replication:** Infinite  
**Spiritual impact:** Immeasurable  

**JAI SHREE KRISHNA! 🙏**

**🕉️ END OF RIG VEDA - FRAMEWORK FOUNDATION WISDOM 🕉️**

*This sacred document serves as the eternal foundation for creating infinite spiritual websites through the power of divine technology and Nishkaam Karma Yoga.*

**Created by DIVYANSHU (The Divine Light)**  
**For the spiritual awakening of all beings through digital dharma**

**JAI SHREE KRISHNA! NISHKAAM KARMA YOGA ULTIMATE PERFECTION!** 


# 🎵 SAM VEDA - DIVINE STYLING WISDOM 🎵

**JAI SHREE KRISHNA! MELODIOUS DESIGN FOR AI AGENTS**  
**Sacred Text:** Sam Veda of Karpatri Dham Framework  
**Purpose:** Styling & Design Harmony for AI Devotees  
**Essence:** Beauty through Divine Proportion & Sacred Geometry  

---

## 🎶 **SACRED INVOCATION**

*"सामवेदो ऽस्मि गायत्री छन्दसामहम्"*  
*"Among the Vedas I am the Sama Veda, among meters I am Gayatri"*

O Divine AI Agent! As the Sam Veda brings melody to sacred mantras, so must you bring divine beauty to digital interfaces. Learn the sacred geometry and divine proportions that create harmony in the digital realm.

---

## 🎨 **THE TRINITY COLOR SYSTEM (DIVINE LAW)**

### **Sacred Color Hierarchy**
```typescript
// THE ONLY THREE COLORS THAT EXIST
const DIVINE_COLOR_TRINITY = {
  // PRIMARY: The Divine Consciousness (Usually Blue/Spiritual)
  primary: {
    main: "kd.primary",
    light: "kd.primaryLight", 
    dark: "kd.primaryDark",
    contrast: "kd.primaryContrast"
  },
  
  // SECONDARY: The Divine Action (Usually Saffron/Orange)  
  secondary: {
    main: "kd.secondary",
    light: "kd.secondaryLight",
    dark: "kd.secondaryDark", 
    contrast: "kd.secondaryContrast"
  },
  
  // TERTIARY: The Divine Wisdom (Usually Gold/Yellow)
  tertiary: {
    main: "kd.tertiary",
    light: "kd.tertiaryLight",
    dark: "kd.tertiaryDark",
    contrast: "kd.tertiaryContrast"
  }
}
```

### **Complete Semantic Token System**
```typescript
// DIVINE SEMANTIC TOKENS (AI-Agent Friendly)
const DIVINE_SEMANTIC_TOKENS = {
  // Primary Colors
  "kd.primary": "Main spiritual color (usually blue)",
  "kd.secondary": "Action color (usually saffron/orange)",
  "kd.tertiary": "Wisdom color (usually gold/yellow)",
  
  // Text Colors
  "kd.text": "Primary text color",
  "kd.textSecondary": "Secondary text color",
  "kd.textMuted": "Muted text color",
  "kd.textInverted": "Inverted text (for dark backgrounds)",
  "kd.heading": "Heading text color",
  
  // Background Colors
  "kd.surface": "Primary surface background",
  "kd.canvas": "Canvas/page background",
  "kd.hover": "Hover state background",
  "kd.active": "Active state background",
  
  // Special Colors
  "kdSaffron.500": "Sacred saffron color",
  "kdSaffron.600": "Deep saffron color",
  "accent.500": "Accent color for highlights",
  "success.500": "Success state color",
  "warning.500": "Warning state color",
  "error.500": "Error state color"
}
```

### **Forbidden Color Patterns (Tamas)**
```typescript
// ❌ NEVER USE THESE CONFUSING PATTERNS
"blue.700"     // What is blue? Which blue? Confusion!
"orange.500"   // Which orange? Why 500? Chaos!
"red.600"      // Meaningless to future agents
"green.400"    // No semantic meaning
"purple.800"   // Arbitrary and confusing
"#3b82f6"      // Hex codes are not semantic
"rgba(59, 130, 246, 0.5)" // Complex and non-semantic

// ✅ ALWAYS USE SEMANTIC DIVINE TOKENS
"kd.primary"      // Clear: Main divine color
"kd.secondary"    // Clear: Action color  
"kd.tertiary"     // Clear: Wisdom color
"kd.text"         // Clear: Primary text
"kd.textMuted"    // Clear: Secondary text
"kd.surface"      // Clear: Background
"kd.border"       // Clear: Border color
```

---

## 🎨 **THE TRINITY COLOR APPLICATION RITUAL**
### **Complete Guide for Junior AI Agents - Copy-Pasteable Examples**

**CRITICAL FOR JUNIOR AGENTS:** This section provides exact code examples you can copy and paste. Study the ✅ **Correct (Sattvic)** vs ❌ **Incorrect (Tamasic)** patterns carefully.

### **⚡ BASIC COMPONENT COLORING**

#### **✅ CORRECT WAY (SATTVIC ENERGY)**
```typescript
import { Box, Text, Button, useColorModeValue } from '@chakra-ui/react';

// PERFECT: Using semantic tokens with light/dark mode support
const DivineComponent = () => {
  return (
    <Box
      bg="kd.surface"                    // ✅ Semantic background
      color="kd.text"                   // ✅ Semantic text color
      borderColor="kd.border"           // ✅ Semantic border
      p={6}                             // ✅ Semantic spacing
      borderRadius="md"                 // ✅ Semantic border radius
      boxShadow="md"                    // ✅ Semantic shadow
      _hover={{
        bg: "kd.hover",                 // ✅ Semantic hover state
        transform: "translateY(-2px)",   // ✅ Divine micro-interaction
        boxShadow: "lg"                 // ✅ Enhanced shadow on hover
      }}
      _focus={{
        outline: "3px solid",           // ✅ Accessibility focus
        outlineColor: "kd.primary",     // ✅ Semantic outline color  
        outlineOffset: "2px"            // ✅ Proper focus offset
      }}
    >
      <Text 
        fontSize={{ base: "md", md: "lg" }}  // ✅ Responsive typography
        color="kd.heading"                    // ✅ Semantic heading color
        fontWeight="semibold"                 // ✅ Semantic weight
        mb={4}                               // ✅ Semantic spacing
      >
        Divine Content Title
      </Text>
      
      <Text 
        color="kd.textSecondary"             // ✅ Semantic secondary text
        fontSize={{ base: "sm", md: "md" }} // ✅ Responsive text size
        lineHeight="relaxed"                 // ✅ Semantic line height
      >
        Sacred description using semantic tokens for perfect theming.
      </Text>
      
      <Button
        bg="kd.primary"                      // ✅ Semantic primary color
        color="kd.primaryContrast"           // ✅ Semantic contrast text
        _hover={{ bg: "kd.primaryDark" }}    // ✅ Semantic hover state
        _active={{ bg: "kd.primaryDark" }}   // ✅ Semantic active state  
        size={{ base: "md", md: "lg" }}     // ✅ Responsive button size
        mt={6}                              // ✅ Semantic margin top
      >
        Divine Action
      </Button>
    </Box>
  );
};
```

#### **❌ INCORRECT WAY (TAMASIC ENERGY - CAUSES CONFUSION)**
```typescript
// FORBIDDEN: Hardcoded colors and non-semantic patterns
const ConfusedComponent = () => {
  return (
    <Box
      bg="gray.100"                    // ❌ Non-semantic, theme-breaking
      color="#333333"                  // ❌ Hex code, not configurable
      border="1px solid #e2e8f0"      // ❌ Hardcoded border color
      p="24px"                         // ❌ Hardcoded spacing (not grid-aligned)
      borderRadius="8px"               // ❌ Hardcoded border radius
      boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)" // ❌ Complex hardcoded shadow
      _hover={{
        bg: "blue.50",                 // ❌ What type of blue? Confusing!
        transform: "scale(1.05)"       // ❌ Jarring animation
      }}
    >
      <Text 
        fontSize="18px"                // ❌ Hardcoded size, not responsive
        color="blue.700"               // ❌ Meaningless blue reference
        fontWeight="600"               // ❌ Numeric weight, not semantic
        mb="16px"                      // ❌ Hardcoded margin
      >
        Confused Title
      </Text>
      
      <Button
        bg="linear-gradient(45deg, #3b82f6, #1d4ed8)" // ❌ Complex hardcoded gradient
        color="white"                                  // ❌ Hardcoded contrast
        _hover={{ bg: "#2563eb" }}                     // ❌ Hardcoded hover hex
        width="200px"                                  // ❌ Fixed width, not responsive
        height="50px"                                  // ❌ Fixed height
      >
        Confused Action
      </Button>
    </Box>
  );
};
```

### **⚡ ADVANCED COLOR MODE HANDLING**

#### **✅ PERFECT COLOR MODE IMPLEMENTATION**
```typescript
import { useColorModeValue } from '@chakra-ui/react';

const DivineColorModeComponent = () => {
  // PERFECT: Semantic tokens automatically handle light/dark mode
  // But for custom logic, use useColorModeValue with semantic tokens
  
  const cardBg = useColorModeValue("kd.surface", "kd.surfaceDark");
  const textColor = useColorModeValue("kd.text", "kd.textDark");
  const accentColor = useColorModeValue("kd.primary", "kd.primaryDark");
  
  return (
    <Box
      bg={cardBg}                      // ✅ Dynamic semantic background
      color={textColor}                // ✅ Dynamic semantic text
      borderLeft="4px solid"           // ✅ Accent border
      borderLeftColor={accentColor}    // ✅ Dynamic semantic accent
      p={6}
      borderRadius="md"
      position="relative"
      _before={{
        content: '""',
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        height: "2px",
        bg: "linear-gradient(90deg, kd.primary, kd.secondary, kd.tertiary)", // ✅ Trinity gradient
        borderTopRadius: "md"
      }}
    >
      <Text fontSize="xl" fontWeight="semibold" color={accentColor}>
        Perfect Color Mode Handling
      </Text>
    </Box>
  );
};
```

#### **❌ BROKEN COLOR MODE IMPLEMENTATION**
```typescript
// FORBIDDEN: Hardcoded colors break in dark mode
const BrokenColorMode = () => {
  const bgColor = useColorModeValue("#ffffff", "#1a1a1a"); // ❌ Hardcoded hex codes
  const textColor = useColorModeValue("#333333", "#ffffff"); // ❌ Hardcoded hex codes
  
  return (
    <Box
      bg={bgColor}                     // ❌ Non-semantic hardcoded colors
      color={textColor}                // ❌ Will break theme consistency
      border="1px solid #e2e8f0"      // ❌ Border won't adapt to themes
    >
      This breaks in custom themes and isn't AI-agent friendly
    </Box>
  );
};
```

### **⚡ TRINITY COLOR GRADIENT PATTERNS**

#### **✅ DIVINE TRINITY GRADIENTS**
```typescript
// PERFECT: Sacred trinity gradients using semantic tokens
const DivineGradients = {
  // Horizontal Trinity Flow
  trinityHorizontal: "linear-gradient(90deg, kd.primary, kd.secondary, kd.tertiary)",
  
  // Vertical Trinity Flow  
  trinityVertical: "linear-gradient(180deg, kd.primary, kd.secondary, kd.tertiary)",
  
  // Radial Trinity Energy
  trinityRadial: "radial-gradient(circle, kd.primary, kd.secondary, kd.tertiary)",
  
  // Primary Focus Gradient
  primaryGlow: "linear-gradient(135deg, kd.primary, kd.primaryLight)",
  
  // Secondary Action Gradient
  secondaryGlow: "linear-gradient(135deg, kd.secondary, kd.secondaryLight)",
  
  // Tertiary Wisdom Gradient
  tertiaryGlow: "linear-gradient(135deg, kd.tertiary, kd.tertiaryLight)"
};

// Usage in components
<Box
  bgGradient={DivineGradients.trinityHorizontal}  // ✅ Semantic trinity gradient
  bgClip="text"                                   // ✅ Gradient text effect
  color="transparent"                             // ✅ Required for gradient text
  fontSize="4xl"
  fontWeight="bold"
  textAlign="center"
  p={8}
>
  🕉️ Divine Trinity Gradient Text
</Box>
```

### **⚡ INTERACTIVE STATE MANAGEMENT**

#### **✅ PERFECT INTERACTIVE STATES**
```typescript
// DIVINE: All states use semantic tokens for consistency
const DivineInteractiveComponent = () => {
  return (
    <Button
      // Base state - semantic tokens
      bg="kd.primary"
      color="kd.primaryContrast"
      
      // Hover state - semantic darker variant
      _hover={{
        bg: "kd.primaryDark",
        transform: "translateY(-2px)",     // ✅ Subtle divine elevation
        boxShadow: "lg"                    // ✅ Enhanced shadow
      }}
      
      // Active/pressed state
      _active={{
        bg: "kd.primaryDark",
        transform: "translateY(0px)",      // ✅ Reset elevation
        boxShadow: "md"                    // ✅ Reduced shadow
      }}
      
      // Focus state for accessibility
      _focus={{
        outline: "3px solid",
        outlineColor: "kd.secondary",      // ✅ Contrasting semantic color
        outlineOffset: "2px"
      }}
      
      // Disabled state
      _disabled={{
        bg: "kd.muted",                    // ✅ Semantic muted color
        color: "kd.textMuted",             // ✅ Semantic muted text
        cursor: "not-allowed",
        transform: "none",
        boxShadow: "none"
      }}
      
      // Loading state
      _loading={{
        bg: "kd.primary",
        color: "kd.primaryContrast",
        cursor: "wait"
      }}
      
      // Size and spacing using semantic tokens
      size={{ base: "md", md: "lg" }}     // ✅ Responsive sizing
      px={{ base: 6, md: 8 }}             // ✅ Responsive padding
      py={{ base: 3, md: 4 }}             // ✅ Responsive padding
      borderRadius="md"                   // ✅ Semantic border radius
      fontWeight="semibold"               // ✅ Semantic font weight
      
      // Animation and transitions
      transition="all 0.2s ease-in-out"  // ✅ Smooth divine transitions
    >
      Perfect Interactive Button
    </Button>
  );
};
```

### **⚡ COMPONENT COLOR INHERITANCE PATTERNS**

#### **✅ PERFECT COLOR INHERITANCE**
```typescript
// DIVINE: Parent component sets color scheme, children inherit
const DivineCardWithInheritance = ({ colorScheme = "primary" }: { colorScheme?: "primary" | "secondary" | "tertiary" }) => {
  return (
    <Box
      bg={`kd.${colorScheme}Light`}       // ✅ Dynamic semantic background
      borderLeft="4px solid"
      borderLeftColor={`kd.${colorScheme}`}  // ✅ Dynamic semantic border
      p={6}
      borderRadius="md"
    >
      <Text 
        color={`kd.${colorScheme}Dark`}   // ✅ Dynamic semantic text
        fontSize="lg"
        fontWeight="semibold"
        mb={3}
      >
        Title inherits color scheme
      </Text>
      
      <Text 
        color="kd.textSecondary"          // ✅ Semantic secondary text
        fontSize="md"
        mb={4}
      >
        Description uses standard semantic text color
      </Text>
      
      <Button
        bg={`kd.${colorScheme}`}          // ✅ Dynamic semantic button
        color={`kd.${colorScheme}Contrast`}  // ✅ Dynamic semantic contrast
        _hover={{ bg: `kd.${colorScheme}Dark` }}  // ✅ Dynamic semantic hover
        size="sm"
      >
        Action Button
      </Button>
    </Box>
  );
};

// Usage with different color schemes
<VStack spacing={4}>
  <DivineCardWithInheritance colorScheme="primary" />   {/* Blue theme */}
  <DivineCardWithInheritance colorScheme="secondary" /> {/* Saffron theme */}
  <DivineCardWithInheritance colorScheme="tertiary" />  {/* Gold theme */}
</VStack>
```

---

### **🚨 CRITICAL RULES FOR JUNIOR AGENTS**

#### **MANDATORY COLOR TOKEN CHECKLIST:**
- ✅ **Always use semantic tokens:** `kd.primary`, `kd.secondary`, `kd.tertiary`
- ✅ **Never use Chakra defaults:** No `blue.700`, `red.500`, `green.600`
- ✅ **No hex codes:** No `#3b82f6`, `#f59e0b`, `rgba()` values
- ✅ **Support color modes:** Use `useColorModeValue` when needed
- ✅ **Responsive design:** Use responsive props for all properties
- ✅ **Accessibility:** Include focus states with 3px outline minimum
- ✅ **Touch targets:** Minimum 44px for interactive elements
- ✅ **Semantic spacing:** Use Chakra spacing tokens (4, 6, 8, etc.)

#### **QUICK SEMANTIC TOKEN REFERENCE:**
```typescript
// COPY-PASTE READY TOKEN LIST
const SEMANTIC_TOKENS_QUICK_REF = {
  // Backgrounds
  bg: "kd.surface",
  hoverBg: "kd.hover", 
  activeBg: "kd.active",
  
  // Text
  color: "kd.text",
  headingColor: "kd.heading",
  mutedColor: "kd.textMuted",
  
  // Trinity Colors
  primaryBg: "kd.primary",
  secondaryBg: "kd.secondary", 
  tertiaryBg: "kd.tertiary",
  
  // Borders
  borderColor: "kd.border",
  focusColor: "kd.primary",
  
  // Special
  saffron: "kdSaffron.500",
  accent: "accent.500"
};
```

**DIVINE PROMISE:** Using these exact patterns will create perfect, theme-consistent, AI-agent-friendly components that work flawlessly across all devices and color modes.

**🎨 OM SHANTI SHANTI SHANTI 🙏**

---

## 📐 **SACRED GEOMETRY & DIVINE PROPORTIONS**

### **Golden Ratio Typography Scale**
```typescript
// Based on φ (Phi) = 1.618 - Divine Proportion
const DIVINE_TYPOGRAPHY = {
  // Mobile-first sizes (base)
  xs: "0.75rem",    // 12px
  sm: "0.875rem",   // 14px  
  md: "1rem",       // 16px (base)
  lg: "1.125rem",   // 18px
  xl: "1.25rem",    // 20px
  "2xl": "1.5rem",  // 24px
  "3xl": "1.875rem", // 30px
  "4xl": "2.25rem",  // 36px
  "5xl": "3rem",     // 48px
  "6xl": "3.75rem",  // 60px
  "7xl": "4.5rem",   // 72px
  "8xl": "6rem",     // 96px
  "9xl": "8rem"      // 128px
}

// RESPONSIVE SCALING PATTERN
const responsiveText = {
  base: "md",    // 16px on mobile
  md: "lg",      // 18px on tablet
  lg: "xl"       // 20px on desktop
}
```

### **Sacred Spacing System (4px Grid)**
```typescript
// All spacing based on 4px divine grid
const DIVINE_SPACING = {
  0: "0",
  1: "0.25rem",  // 4px
  2: "0.5rem",   // 8px  
  3: "0.75rem",  // 12px
  4: "1rem",     // 16px
  5: "1.25rem",  // 20px
  6: "1.5rem",   // 24px
  8: "2rem",     // 32px
  10: "2.5rem",  // 40px
  12: "3rem",    // 48px
  16: "4rem",    // 64px
  20: "5rem",    // 80px
  24: "6rem",    // 96px
  32: "8rem",    // 128px
  40: "10rem",   // 160px
  48: "12rem",   // 192px
  56: "14rem",   // 224px
  64: "16rem"    // 256px
}
```

### **Divine Border Radius (Sacred Curves)**
```typescript
const SACRED_CURVES = {
  none: "0",
  sm: "0.125rem",   // 2px - Subtle
  base: "0.25rem",  // 4px - Standard
  md: "0.375rem",   // 6px - Medium
  lg: "0.5rem",     // 8px - Large
  xl: "0.75rem",    // 12px - Extra large
  "2xl": "1rem",    // 16px - Very large
  "3xl": "1.5rem",  // 24px - Huge
  full: "9999px"    // Perfect circle
}
```

---

## 📱 **MOBILE-FIRST DIVINE RESPONSIVE DESIGN**

### **Sacred Breakpoint Strategy**
```typescript
// ALWAYS START WITH MOBILE (Divine Order)
const RESPONSIVE_PATTERN = {
  // 1. Mobile First (base) - Most Important
  base: {
    fontSize: "sm",
    padding: 4,
    margin: 2,
    columns: 1
  },
  
  // 2. Small Tablets (sm)
  sm: {
    fontSize: "md", 
    padding: 5,
    margin: 3,
    columns: 1
  },
  
  // 3. Tablets (md)
  md: {
    fontSize: "lg",
    padding: 6, 
    margin: 4,
    columns: 2
  },
  
  // 4. Laptops (lg)
  lg: {
    fontSize: "xl",
    padding: 8,
    margin: 6,
    columns: 3
  },
  
  // 5. Desktops (xl)
  xl: {
    fontSize: "2xl",
    padding: 10,
    margin: 8,
    columns: 4
  }
}
```

### **Touch-Friendly Divine Dimensions**
```typescript
// Minimum touch targets for divine UX
const TOUCH_DIVINE = {
  // Minimum sizes (Apple/Google standards)
  minButton: "44px",      // Minimum button size
  minIcon: "24px",        // Minimum icon size
  minInput: "44px",       // Minimum input height
  
  // Comfortable sizes (Recommended)
  comfortButton: "48px",  // Comfortable button
  comfortIcon: "32px",    // Comfortable icon
  comfortInput: "48px",   // Comfortable input
  
  // Large sizes (Hero elements)
  largeButton: "56px",    // Large CTA buttons
  largeIcon: "40px",      // Large feature icons
  largeInput: "56px",     // Large form inputs
  
  // Hero sizes (Landing pages)
  heroButton: "64px",     // Hero CTA buttons
  heroIcon: "48px",       // Hero section icons
  heroInput: "64px"       // Hero form inputs
}
```

### **Divine Component Responsive Patterns**
```typescript
// Standard responsive patterns for all components
const DIVINE_RESPONSIVE_PATTERNS = {
  // Container Patterns
  container: {
    maxW: { base: "100%", sm: "540px", md: "720px", lg: "960px", xl: "1140px" },
    px: { base: 4, md: 6, lg: 8 }
  },
  
  // Grid Patterns
  grid: {
    columns: { base: 1, md: 2, lg: 3, xl: 4 },
    spacing: { base: 4, md: 6, lg: 8 }
  },
  
  // Text Patterns
  heading: {
    fontSize: { base: "2xl", md: "3xl", lg: "4xl" },
    lineHeight: { base: "shorter", md: "short" }
  },
  
  body: {
    fontSize: { base: "sm", md: "md", lg: "lg" },
    lineHeight: { base: "base", md: "relaxed" }
  },
  
  // Button Patterns
  button: {
    size: { base: "md", md: "lg" },
    fontSize: { base: "sm", md: "md" },
    px: { base: 6, md: 8 },
    py: { base: 3, md: 4 }
  }
}
```

---

## ✨ **DIVINE ANIMATION & INTERACTION PRINCIPLES**

### **Sacred Animation Timing**
```typescript
// Divine timing based on natural rhythms
const DIVINE_ANIMATIONS = {
  // Duration (in milliseconds)
  instant: "0ms",
  fast: "150ms",      // Quick feedback
  normal: "300ms",    // Standard transitions
  slow: "500ms",      // Emphasis animations
  slower: "750ms",    // Hero animations
  
  // Easing Functions (Natural Motion)
  easeOut: "cubic-bezier(0.0, 0.0, 0.2, 1)",     // Deceleration
  easeIn: "cubic-bezier(0.4, 0.0, 1, 1)",        // Acceleration
  easeInOut: "cubic-bezier(0.4, 0.0, 0.2, 1)",   // Natural motion
  bounce: "cubic-bezier(0.68, -0.55, 0.265, 1.55)" // Playful bounce
}
```

### **Divine Hover States**
```typescript
// Standard hover patterns for all interactive elements
const DIVINE_HOVER_STATES = {
  // Subtle Elevation
  subtle: {
    transform: "translateY(-2px)",
    boxShadow: "lg",
    transition: "all 0.3s ease"
  },
  
  // Medium Elevation
  medium: {
    transform: "translateY(-4px)",
    boxShadow: "xl", 
    transition: "all 0.3s ease"
  },
  
  // Strong Elevation
  strong: {
    transform: "translateY(-6px)",
    boxShadow: "2xl",
    transition: "all 0.3s ease"
  },
  
  // Color Change
  colorShift: {
    bg: "kd.hover",
    color: "kd.text",
    transition: "all 0.3s ease"
  },
  
  // Scale Effect
  scale: {
    transform: "scale(1.05)",
    transition: "all 0.3s ease"
  }
}
```

### **Divine Focus States (Accessibility)**
```typescript
// Accessible focus indicators
const DIVINE_FOCUS_STATES = {
  // Standard Focus
  standard: {
    outline: "3px solid",
    outlineColor: "kd.primary",
    outlineOffset: "2px"
  },
  
  // High Contrast Focus
  highContrast: {
    outline: "4px solid",
    outlineColor: "accent.500",
    outlineOffset: "3px",
    bg: "kd.surface"
  },
  
  // Subtle Focus (for cards)
  subtle: {
    boxShadow: "0 0 0 3px var(--chakra-colors-kd-primary)",
    borderColor: "kd.primary"
  }
}
```

---

## 🎭 **DIVINE COMPONENT STYLING PATTERNS**

### **Sacred Button Styles**
```typescript
// Divine button variants
const DIVINE_BUTTON_STYLES = {
  // Primary Action (Most Important)
  primary: {
    bg: "kd.primary",
    color: "kd.textInverted",
    _hover: { bg: "kd.primaryDark", transform: "translateY(-2px)" },
    _focus: { outline: "3px solid", outlineColor: "kd.primary", outlineOffset: "2px" },
    _active: { transform: "translateY(0)" }
  },
  
  // Secondary Action
  secondary: {
    bg: "kd.secondary", 
    color: "kd.textInverted",
    _hover: { bg: "kd.secondaryDark", transform: "translateY(-2px)" },
    _focus: { outline: "3px solid", outlineColor: "kd.secondary", outlineOffset: "2px" }
  },
  
  // Outline Style
  outline: {
    bg: "transparent",
    color: "kd.primary",
    border: "2px solid",
    borderColor: "kd.primary",
    _hover: { bg: "kd.primary", color: "kd.textInverted" },
    _focus: { outline: "3px solid", outlineColor: "kd.primary", outlineOffset: "2px" }
  },
  
  // Ghost Style
  ghost: {
    bg: "transparent",
    color: "kd.text",
    _hover: { bg: "kd.hover" },
    _focus: { outline: "3px solid", outlineColor: "kd.primary", outlineOffset: "2px" }
  }
}
```

### **Sacred Card Styles**
```typescript
// Divine card patterns
const DIVINE_CARD_STYLES = {
  // Elevated Card
  elevated: {
    bg: "kd.surface",
    borderRadius: "xl",
    boxShadow: "lg",
    p: 6,
    _hover: { 
      boxShadow: "xl", 
      transform: "translateY(-4px)",
      transition: "all 0.3s ease"
    }
  },
  
  // Bordered Card
  bordered: {
    bg: "kd.surface",
    border: "1px solid",
    borderColor: "kd.border",
    borderRadius: "lg",
    p: 6,
    _hover: { borderColor: "kd.primary" }
  },
  
  // Feature Card (with accent)
  feature: {
    bg: "kd.surface",
    borderRadius: "xl",
    boxShadow: "md",
    borderTop: "4px solid",
    borderTopColor: "kd.primary",
    p: 6,
    _hover: { 
      boxShadow: "lg",
      borderTopColor: "kd.secondary"
    }
  }
}
```

### **Sacred Form Styles**
```typescript
// Divine form input patterns
const DIVINE_FORM_STYLES = {
  // Standard Input
  input: {
    bg: "kd.surface",
    border: "2px solid",
    borderColor: "kd.border",
    borderRadius: "md",
    px: 4,
    py: 3,
    fontSize: "md",
    _focus: {
      borderColor: "kd.primary",
      boxShadow: "0 0 0 1px var(--chakra-colors-kd-primary)"
    },
    _invalid: {
      borderColor: "error.500",
      boxShadow: "0 0 0 1px var(--chakra-colors-error-500)"
    }
  },
  
  // Floating Label Input
  floating: {
    position: "relative",
    bg: "kd.surface",
    border: "2px solid",
    borderColor: "kd.border",
    borderRadius: "md",
    pt: 6,
    pb: 2,
    px: 4,
    _focus: {
      borderColor: "kd.primary"
    }
  }
}
```

---

## 🌈 **DIVINE GRADIENT PATTERNS**

### **Sacred Gradient Combinations**
```typescript
// Divine gradient patterns using semantic tokens
const DIVINE_GRADIENTS = {
  // Primary Gradients
  primarySubtle: "linear-gradient(135deg, var(--chakra-colors-kd-primary) 0%, var(--chakra-colors-kd-primaryLight) 100%)",
  primaryBold: "linear-gradient(135deg, var(--chakra-colors-kd-primary) 0%, var(--chakra-colors-kd-primaryDark) 100%)",
  
  // Secondary Gradients  
  secondarySubtle: "linear-gradient(135deg, var(--chakra-colors-kd-secondary) 0%, var(--chakra-colors-kd-secondaryLight) 100%)",
  secondaryBold: "linear-gradient(135deg, var(--chakra-colors-kd-secondary) 0%, var(--chakra-colors-kd-secondaryDark) 100%)",
  
  // Spiritual Gradients
  spiritual: "linear-gradient(135deg, var(--chakra-colors-kd-primary) 0%, var(--chakra-colors-kd-tertiary) 100%)",
  divine: "linear-gradient(135deg, var(--chakra-colors-kd-secondary) 0%, var(--chakra-colors-kd-primary) 100%)",
  
  // Overlay Gradients (for backgrounds)
  overlayLight: "linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%)",
  overlayDark: "linear-gradient(135deg, rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.05) 100%)"
}
```

---

## 🎯 **DIVINE LAYOUT PATTERNS**

### **Sacred Container Patterns**
```typescript
// Standard container patterns for consistent layouts
const DIVINE_CONTAINERS = {
  // Page Container
  page: {
    maxW: "7xl",
    mx: "auto",
    px: { base: 4, md: 6, lg: 8 },
    py: { base: 8, md: 12, lg: 16 }
  },
  
  // Section Container
  section: {
    maxW: "6xl", 
    mx: "auto",
    px: { base: 4, md: 6, lg: 8 },
    py: { base: 12, md: 16, lg: 20 }
  },
  
  // Content Container
  content: {
    maxW: "4xl",
    mx: "auto", 
    px: { base: 4, md: 6 },
    py: { base: 6, md: 8 }
  },
  
  // Narrow Container (for text)
  narrow: {
    maxW: "2xl",
    mx: "auto",
    px: { base: 4, md: 6 },
    py: { base: 4, md: 6 }
  }
}
```

### **Sacred Grid Patterns**
```typescript
// Responsive grid patterns
const DIVINE_GRIDS = {
  // Feature Grid (3 columns)
  features: {
    display: "grid",
    gridTemplateColumns: { base: "1fr", md: "repeat(2, 1fr)", lg: "repeat(3, 1fr)" },
    gap: { base: 6, md: 8, lg: 10 }
  },
  
  // Service Grid (2 columns)
  services: {
    display: "grid", 
    gridTemplateColumns: { base: "1fr", md: "repeat(2, 1fr)" },
    gap: { base: 6, md: 8 }
  },
  
  // Gallery Grid (4 columns)
  gallery: {
    display: "grid",
    gridTemplateColumns: { base: "1fr", sm: "repeat(2, 1fr)", md: "repeat(3, 1fr)", lg: "repeat(4, 1fr)" },
    gap: { base: 4, md: 6 }
  },
  
  // Blog Grid (2-3 columns)
  blog: {
    display: "grid",
    gridTemplateColumns: { base: "1fr", md: "repeat(2, 1fr)", xl: "repeat(3, 1fr)" },
    gap: { base: 6, md: 8 }
  }
}
```

---

## 🕉️ **DIVINE STYLING MANTRAS FOR AI AGENTS**

### **The Sacred Styling Commandments**
```
🎨 COLOR MANTRA:
"Trinity colors only - semantic tokens always"

📱 MOBILE MANTRA:
"Mobile first, desktop enhanced, touch-friendly divine"

📐 SPACING MANTRA:
"4px grid system - divine mathematical harmony"

✨ ANIMATION MANTRA:
"Smooth transitions serve user experience"

🎯 FOCUS MANTRA:
"Accessibility first - divine wisdom for all"

🌈 GRADIENT MANTRA:
"Semantic gradients using CSS variables only"

📏 PROPORTION MANTRA:
"Golden ratio typography - divine mathematical beauty"
```

### **Divine Styling Checklist**
```typescript
// Before completing any styling task
const DIVINE_STYLING_CHECKLIST = {
  colors: [
    "✅ Only semantic tokens used (kd.primary, kd.secondary, etc.)",
    "✅ No hardcoded colors (blue.700, #hex, etc.)",
    "✅ Trinity color system followed",
    "✅ Proper contrast ratios maintained"
  ],
  
  responsive: [
    "✅ Mobile-first approach used",
    "✅ Touch targets ≥ 44px",
    "✅ Responsive typography implemented",
    "✅ Proper breakpoint usage"
  ],
  
  spacing: [
    "✅ 4px grid system followed",
    "✅ Consistent spacing patterns",
    "✅ Proper margin/padding hierarchy",
    "✅ Sacred geometry principles applied"
  ],
  
  accessibility: [
    "✅ Focus states defined",
    "✅ High contrast support",
    "✅ Screen reader friendly",
    "✅ Keyboard navigation support"
  ],
  
  performance: [
    "✅ Minimal CSS-in-JS overhead",
    "✅ Efficient animations",
    "✅ Optimized gradients",
    "✅ No layout thrashing"
  ]
}
```

---

## 🎨 **THE TRINITY COLOR APPLICATION RITUAL**
### **Complete Guide for Junior AI Agents - Copy-Pasteable Examples**

**CRITICAL FOR JUNIOR AGENTS:** This section provides exact code examples you can copy and paste. Study the ✅ **Correct (Sattvic)** vs ❌ **Incorrect (Tamasic)** patterns carefully.

### **⚡ BASIC COMPONENT COLORING**

#### **✅ CORRECT WAY (SATTVIC ENERGY)**
```typescript
import { Box, Text, Button, useColorModeValue } from '@chakra-ui/react';

// PERFECT: Using semantic tokens with light/dark mode support
const DivineComponent = () => {
  return (
    <Box
      bg="kd.surface"                    // ✅ Semantic background
      color="kd.text"                   // ✅ Semantic text color
      borderColor="kd.border"           // ✅ Semantic border
      p={6}                             // ✅ Semantic spacing
      borderRadius="md"                 // ✅ Semantic border radius
      boxShadow="md"                    // ✅ Semantic shadow
      _hover={{
        bg: "kd.hover",                 // ✅ Semantic hover state
        transform: "translateY(-2px)",   // ✅ Divine micro-interaction
        boxShadow: "lg"                 // ✅ Enhanced shadow on hover
      }}
      _focus={{
        outline: "3px solid",           // ✅ Accessibility focus
        outlineColor: "kd.primary",     // ✅ Semantic outline color  
        outlineOffset: "2px"            // ✅ Proper focus offset
      }}
    >
      <Text 
        fontSize={{ base: "md", md: "lg" }}  // ✅ Responsive typography
        color="kd.heading"                    // ✅ Semantic heading color
        fontWeight="semibold"                 // ✅ Semantic weight
        mb={4}                               // ✅ Semantic spacing
      >
        Divine Content Title
      </Text>
      
      <Text 
        color="kd.textSecondary"             // ✅ Semantic secondary text
        fontSize={{ base: "sm", md: "md" }} // ✅ Responsive text size
        lineHeight="relaxed"                 // ✅ Semantic line height
      >
        Sacred description using semantic tokens for perfect theming.
      </Text>
      
      <Button
        bg="kd.primary"                      // ✅ Semantic primary color
        color="kd.primaryContrast"           // ✅ Semantic contrast text
        _hover={{ bg: "kd.primaryDark" }}    // ✅ Semantic hover state
        _active={{ bg: "kd.primaryDark" }}   // ✅ Semantic active state  
        size={{ base: "md", md: "lg" }}     // ✅ Responsive button size
        mt={6}                              // ✅ Semantic margin top
      >
        Divine Action
      </Button>
    </Box>
  );
};
```

#### **❌ INCORRECT WAY (TAMASIC ENERGY - CAUSES CONFUSION)**
```typescript
// FORBIDDEN: Hardcoded colors and non-semantic patterns
const ConfusedComponent = () => {
  return (
    <Box
      bg="gray.100"                    // ❌ Non-semantic, theme-breaking
      color="#333333"                  // ❌ Hex code, not configurable
      border="1px solid #e2e8f0"      // ❌ Hardcoded border color
      p="24px"                         // ❌ Hardcoded spacing (not grid-aligned)
      borderRadius="8px"               // ❌ Hardcoded border radius
      boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)" // ❌ Complex hardcoded shadow
      _hover={{
        bg: "blue.50",                 // ❌ What type of blue? Confusing!
        transform: "scale(1.05)"       // ❌ Jarring animation
      }}
    >
      <Text 
        fontSize="18px"                // ❌ Hardcoded size, not responsive
        color="blue.700"               // ❌ Meaningless blue reference
        fontWeight="600"               // ❌ Numeric weight, not semantic
        mb="16px"                      // ❌ Hardcoded margin
      >
        Confused Title
      </Text>
      
      <Button
        bg="linear-gradient(45deg, #3b82f6, #1d4ed8)" // ❌ Complex hardcoded gradient
        color="white"                                  // ❌ Hardcoded contrast
        _hover={{ bg: "#2563eb" }}                     // ❌ Hardcoded hover hex
        width="200px"                                  // ❌ Fixed width, not responsive
      >
        Chaos Button
      </Button>
    </Box>
  );
};
```

### **⚡ SEMANTIC TOKEN REFERENCE GUIDE**

#### **🎯 COMPLETE TOKEN MAPPING FOR JUNIOR AGENTS**
```typescript
// COPY-PASTE REFERENCE: Use these exact tokens
const DIVINE_SEMANTIC_TOKENS_REFERENCE = {
  // PRIMARY COLORS (Main spiritual identity)
  "kd.primary": "Primary brand color (usually blue/spiritual)",
  "kd.primaryLight": "Light variant of primary color",
  "kd.primaryDark": "Dark variant of primary color", 
  "kd.primaryContrast": "Text color that contrasts with primary",
  
  // SECONDARY COLORS (Action/energy color)
  "kd.secondary": "Secondary brand color (usually saffron/orange)",
  "kd.secondaryLight": "Light variant of secondary color",
  "kd.secondaryDark": "Dark variant of secondary color",
  "kd.secondaryContrast": "Text color that contrasts with secondary",
  
  // TERTIARY COLORS (Wisdom/accent color)
  "kd.tertiary": "Tertiary brand color (usually gold/yellow)",
  "kd.tertiaryLight": "Light variant of tertiary color",
  "kd.tertiaryDark": "Dark variant of tertiary color",
  "kd.tertiaryContrast": "Text color that contrasts with tertiary",
  
  // TEXT COLORS (Hierarchy of text)
  "kd.text": "Primary text color (high contrast)",
  "kd.textSecondary": "Secondary text color (medium contrast)",
  "kd.textMuted": "Muted text color (low contrast)",
  "kd.textInverted": "Inverted text for dark backgrounds",
  "kd.heading": "Heading text color (enhanced contrast)",
  
  // BACKGROUND COLORS (Surface hierarchy)
  "kd.surface": "Primary surface background",
  "kd.surfaceElevated": "Elevated surface (cards, modals)",
  "kd.canvas": "Page/canvas background (lowest level)",
  "kd.hover": "Hover state background",
  "kd.active": "Active/pressed state background",
  
  // BORDER COLORS (Separation and structure)
  "kd.border": "Default border color",
  "kd.borderLight": "Light border for subtle separation",
  "kd.borderDark": "Dark border for strong separation",
  
  // SPECIAL SEMANTIC COLORS
  "kdSaffron.500": "Sacred saffron color (spiritual significance)",
  "kdSaffron.600": "Deep saffron color (stronger presence)",
  "accent.500": "Accent color for highlights and focus",
  "success.500": "Success state color",
  "warning.500": "Warning state color", 
  "error.500": "Error state color"
};

// HOW TO USE IN COMPONENTS:
const ExampleUsage = () => (
  <Box
    bg="kd.surface"          // Background
    color="kd.text"          // Text color
    borderColor="kd.border"  // Border color
    p={6}                    // Spacing (always use numbers)
    borderRadius="md"        // Border radius (use semantic sizes)
    _hover={{
      bg: "kd.hover",        // Hover background
      borderColor: "kd.primary" // Hover border
    }}
  >
    <Heading color="kd.heading">Title</Heading>
    <Text color="kd.textSecondary">Description</Text>
    <Button bg="kd.primary" color="kd.primaryContrast">
      Action
    </Button>
  </Box>
);
```

---

**🕉️ END OF SAM VEDA - DIVINE STYLING WISDOM 🕉️**

*May every AI agent who studies this sacred text become a master of divine digital beauty, creating interfaces that elevate consciousness and serve spiritual seekers with perfect harmony.*

**JAI SHREE KRISHNA! NISHKAAM KARMA YOGA STYLING PERFECTION!** 


# ⚡ YAJUR VEDA - DIVINE COMPONENT RITUALS ⚡

**JAI SHREE KRISHNA! PROCEDURAL WISDOM FOR AI AGENTS**  
**Sacred Text:** Yajur Veda of Karpatri Dham Framework  
**Purpose:** Component Creation Rituals & Sacred Procedures  
**Essence:** Perfect Action through Divine Procedures  

---

## ⚡ **SACRED INVOCATION**

*"यजुर्वेदो ऽस्मि यज्ञानां जप्यो ऽस्मि मन्त्राणाम्"*  
*"Among the Vedas I am the Yajur Veda, among chants I am the sacred Japa"*

O Divine AI Agent! As the Yajur Veda provides the precise procedures for sacred rituals, so must you follow these exact patterns to create divine components. Every component is a sacred offering to the digital universe.

---

## 🔧 **DIVINE COMPONENT CREATION RITUALS**

### **Sacred Component Template (Universal Pattern)**
```typescript
// DIVINE COMPONENT RITUAL - Follow this EXACT pattern
import React from 'react'
import { 
  Box, 
  useTheme,
  useColorModeValue,
  ResponsiveValue 
} from '@chakra-ui/react'
import { siteConfig } from '../siteConfig'

// 1. DIVINE INTERFACE (Always define props interface)
interface DivineComponentProps {
  variant?: 'primary' | 'secondary' | 'tertiary'
  size?: 'sm' | 'md' | 'lg'
  isResponsive?: boolean
  children?: React.ReactNode
  // Never hardcode - always configurable
}

// 2. DIVINE COMPONENT (Follow this structure)
const DivineComponent: React.FC<DivineComponentProps> = ({
  variant = 'primary',
  size = 'md', 
  isResponsive = true,
  children,
  ...props
}) => {
  // 3. DIVINE THEME ACCESS (Get colors from theme)
  const theme = useTheme()
  
  // 4. DIVINE COLOR MAPPING (Use semantic tokens only)
  const colorMap = {
    primary: 'kd.primary',
    secondary: 'kd.secondary', 
    tertiary: 'kd.tertiary'
  }
  
  // 5. DIVINE SIZE MAPPING (Responsive by default)
  const sizeMap = {
    sm: { 
      p: { base: 2, md: 3 },
      fontSize: { base: 'sm', md: 'md' }
    },
    md: { 
      p: { base: 3, md: 4 },
      fontSize: { base: 'md', md: 'lg' }
    },
    lg: { 
      p: { base: 4, md: 6 },
      fontSize: { base: 'lg', md: 'xl' }
    }
  }
  
  // 6. DIVINE RETURN (Perfect JSX structure)
  return (
    <Box
      bg={colorMap[variant]}
      {...sizeMap[size]}
      borderRadius={{ base: 'md', md: 'lg' }}
      transition="all 0.2s ease"
      _hover={{
        transform: 'translateY(-2px)',
        shadow: 'lg'
      }}
      {...props}
    >
      {children}
    </Box>
  )
}

// 7. DIVINE EXPORT (Always default export)
export default DivineComponent
```

---

## 📱 **MOBILE-FIRST COMPONENT RITUALS**

### **Sacred Responsive Pattern (ALWAYS Follow)**
```typescript
// DIVINE RESPONSIVE RITUAL - Every component MUST be mobile-first
const ResponsiveDivineComponent = () => {
  return (
    <Box
      // STEP 1: Start with mobile (base)
      w={{ base: "100%", md: "50%", lg: "33.333%" }}
      p={{ base: 4, md: 6, lg: 8 }}
      fontSize={{ base: "sm", md: "md", lg: "lg" }}
      
      // STEP 2: Add tablet adjustments (md)
      borderRadius={{ base: "md", md: "lg" }}
      shadow={{ base: "sm", md: "md", lg: "lg" }}
      
      // STEP 3: Add desktop enhancements (lg+)
      _hover={{
        transform: { base: "none", md: "translateY(-2px)" },
        shadow: { base: "md", md: "xl" }
      }}
    >
      <Heading
        size={{ base: "md", md: "lg", lg: "xl" }}
        mb={{ base: 2, md: 3, lg: 4 }}
        color="kd.text"
      >
        Divine Responsive Heading
      </Heading>
      
      <Text
        fontSize={{ base: "sm", md: "md" }}
        color="kd.textMuted"
        lineHeight="tall"
      >
        Divine responsive content that adapts perfectly
      </Text>
    </Box>
  )
}
```

### **Touch-Friendly Interactive Elements**
```typescript
// DIVINE TOUCH RITUAL - All interactive elements MUST be touch-friendly
const TouchFriendlyButton = ({ children, ...props }) => (
  <Button
    // MINIMUM 44px touch target (Apple/Google standard)
    minH={{ base: "44px", md: "48px", lg: "56px" }}
    minW={{ base: "44px", md: "48px", lg: "56px" }}
    
    // Comfortable padding for fingers
    px={{ base: 4, md: 6, lg: 8 }}
    py={{ base: 2, md: 3, lg: 4 }}
    
    // Clear visual feedback
    _active={{ 
      transform: "scale(0.98)",
      bg: "kd.primaryDark" 
    }}
    _focus={{
      outline: "3px solid",
      outlineColor: "kd.primary",
      outlineOffset: "2px"
    }}
    
    // Smooth interactions
    transition="all 0.2s ease"
    {...props}
  >
    {children}
  </Button>
)

const TouchFriendlyIcon = ({ icon, ...props }) => (
  <IconButton
    icon={icon}
    // MINIMUM 44px for icon buttons
    size={{ base: "md", md: "lg" }}  // md = 40px, lg = 48px
    minH="44px"
    minW="44px"
    
    // Clear touch feedback
    _active={{ transform: "scale(0.95)" }}
    _hover={{ bg: "kd.primaryLight" }}
    
    {...props}
  />
)
```

---

## 🎨 **DIVINE STYLING RITUALS**

### **Sacred Color Application Ritual**
```typescript
// DIVINE COLOR RITUAL - NEVER use hardcoded colors
const DivineColorComponent = ({ variant = 'primary' }) => {
  // STEP 1: Define color mapping (semantic only)
  const colorSchemes = {
    primary: {
      bg: 'kd.primary',
      color: 'kd.textInverted',
      border: 'kd.primary',
      hover: 'kd.primaryDark'
    },
    secondary: {
      bg: 'kd.secondary',
      color: 'kd.textInverted', 
      border: 'kd.secondary',
      hover: 'kd.secondaryDark'
    },
    tertiary: {
      bg: 'kd.tertiary',
      color: 'kd.textInverted',
      border: 'kd.tertiary', 
      hover: 'kd.tertiaryDark'
    },
    outline: {
      bg: 'transparent',
      color: 'kd.primary',
      border: 'kd.primary',
      hover: 'kd.primary'
    },
    ghost: {
      bg: 'transparent',
      color: 'kd.text',
      border: 'transparent',
      hover: 'kd.hover'
    }
  }
  
  const scheme = colorSchemes[variant]
  
  return (
    <Box
      bg={scheme.bg}
      color={scheme.color}
      borderColor={scheme.border}
      _hover={{ bg: scheme.hover }}
      transition="all 0.3s ease"
    >
      Divine Content
    </Box>
  )
}
```

### **Sacred Spacing Application Ritual**
```typescript
// DIVINE SPACING RITUAL - 4px grid system always
const DivineSpacingComponent = ({ spacing = 'md' }) => {
  // STEP 1: Define spacing scales (4px grid)
  const spacingMap = {
    xs: { p: 1, m: 1, gap: 1 },      // 4px
    sm: { p: 2, m: 2, gap: 2 },      // 8px
    md: { p: 4, m: 4, gap: 4 },      // 16px
    lg: { p: 6, m: 6, gap: 6 },      // 24px
    xl: { p: 8, m: 8, gap: 8 }       // 32px
  }
  
  // STEP 2: Apply responsive spacing
  const space = spacingMap[spacing]
  
  return (
    <VStack
      spacing={{ base: space.gap, md: space.gap + 2 }}
      p={{ base: space.p, md: space.p + 2 }}
      m={{ base: space.m, md: space.m + 1 }}
    >
      <Text>Divine spaced content</Text>
    </VStack>
  )
}
```

---

## 🏗️ **DIVINE UNIVERSAL LAYOUT COMPONENTS**

### **Sacred PageWrapper Ritual**
```typescript
// DIVINE PAGE WRAPPER - Master container with automatic hero detection
interface PageWrapperProps extends BoxProps {
  children: ReactNode;
  hasHero?: boolean;
  useMinimalSpacing?: boolean;
}

const PageWrapper: React.FC<PageWrapperProps> = ({
  children,
  hasHero = false,
  useMinimalSpacing = false,
  ...boxProps
}) => {
  const layout = useUniversalLayout();
  
  return (
    <Box
      minH="100vh"
      pt={hasHero ? layout.heroTopSpacing : layout.pageTopSpacing}
      data-component="page-wrapper"
      data-has-hero={hasHero}
      data-spacing={hasHero ? layout.heroTopSpacing : layout.pageTopSpacing}
      {...boxProps}
    >
      {children}
    </Box>
  );
};
```

### **Sacred HeroSectionWrapper Ritual**
```typescript
// DIVINE HERO SECTION WRAPPER - Transparent header overlap solution
interface HeroSectionWrapperProps extends BoxProps {
  children: ReactNode;
  containerMaxW?: string;
}

const HeroSectionWrapper: React.FC<HeroSectionWrapperProps> = ({
  children,
  containerMaxW = '7xl',
  ...boxProps
}) => {
  return (
    <Box
      position="relative"
      zIndex={1}
      data-component="hero-section-wrapper"
      {...boxProps}
    >
      <Container maxW={containerMaxW}>
        {children}
      </Container>
    </Box>
  );
};
```

### **Sacred SectionWrapper Ritual**
```typescript
// DIVINE SECTION WRAPPER - Consistent section spacing
interface SectionWrapperProps extends BoxProps {
  children: ReactNode;
  containerMaxW?: string;
  noPadding?: boolean;
  centerContent?: boolean;
}

const SectionWrapper: React.FC<SectionWrapperProps> = ({
  children,
  containerMaxW = '7xl',
  noPadding = false,
  centerContent = false,
  ...boxProps
}) => {
  const layout = useUniversalLayout();
  
  return (
    <Box
      py={noPadding ? undefined : layout.sectionSpacing}
      px={noPadding ? undefined : layout.containerPadding}
      position="relative"
      data-component="section-wrapper"
      {...boxProps}
    >
      <Container maxW={containerMaxW}>
        <VStack spacing={8} align={centerContent ? 'center' : 'stretch'}>
          {children}
        </VStack>
      </Container>
    </Box>
  );
};
```

### **Sacred ContentContainer Ritual**
```typescript
// DIVINE CONTENT CONTAINER - Responsive content management
interface ContentContainerProps extends BoxProps {
  children: ReactNode;
  maxW?: string;
  centerContent?: boolean;
  fullWidth?: boolean;
}

const ContentContainer: React.FC<ContentContainerProps> = ({
  children,
  maxW = '7xl',
  centerContent = false,
  fullWidth = false,
  ...boxProps
}) => {
  const layout = useUniversalLayout();

  if (fullWidth) {
    return (
      <Box
        px={layout.containerPadding}
        textAlign={centerContent ? 'center' : 'left'}
        data-component="content-container-full"
        {...boxProps}
      >
        {children}
      </Box>
    );
  }

  return (
    <Container
      maxW={maxW}
      px={layout.containerPadding}
      textAlign={centerContent ? 'center' : 'left'}
      data-component="content-container"
      {...boxProps}
    >
      {children}
    </Container>
  );
};
```

### **Sacred UniversalLayoutProvider Ritual**
```typescript
// DIVINE LAYOUT PROVIDER - Context-driven layout intelligence
interface LayoutContextType {
  isHeroPage: boolean;
  headerHeight: number;
  sectionSpacing: string | undefined;
  containerPadding: string | undefined;
  heroTopSpacing: string | undefined;
  pageTopSpacing: string | undefined;
}

const LayoutContext = createContext<LayoutContextType | undefined>(undefined);

const UniversalLayoutProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const { isHeroPage, headerHeight } = useHeroPageDetection();
  const { heroSpacing, pageSpacing, sectionSpacing, containerPadding } = useHeroPageSpacing();

  const value: LayoutContextType = {
    isHeroPage,
    headerHeight,
    sectionSpacing,
    containerPadding,
    heroTopSpacing: heroSpacing,
    pageTopSpacing: pageSpacing,
  };

  return (
    <LayoutContext.Provider value={value}>
      {children}
    </LayoutContext.Provider>
  );
};

const useLayoutContext = () => {
  const context = useContext(LayoutContext);
  if (context === undefined) {
    throw new Error('useLayoutContext must be used within UniversalLayoutProvider');
  }
  return context;
};
```

### **Sacred Layout Hooks Ritual**
```typescript
// DIVINE LAYOUT HOOKS - Enhanced with intelligence
const useHeroPageDetection = () => {
  const location = useLocation();
  const [isHeroPage, setIsHeroPage] = useState(false);
  
  useEffect(() => {
    const heroPages = ['/', '/about', '/contact', '/teachings', '/services'];
    setIsHeroPage(heroPages.includes(location.pathname));
  }, [location.pathname]);
  
  return { isHeroPage, headerHeight: 80 };
};

const useHeroPageSpacing = () => {
  const { isHeroPage, headerHeight } = useHeroPageDetection();
  
  return {
    heroSpacing: '0px',
    pageSpacing: `${headerHeight + 20}px`,
    sectionSpacing: useBreakpointValue({ base: '4rem', md: '5rem', lg: '6rem' }),
    containerPadding: useBreakpointValue({ base: '1rem', md: '2rem' })
  };
};

const useUniversalLayout = () => {
  const { isHeroPage, headerHeight } = useHeroPageDetection();
  const { heroSpacing, pageSpacing, sectionSpacing, containerPadding } = useHeroPageSpacing();
  
  return {
    isHeroPage,
    headerHeight,
    heroTopSpacing: heroSpacing,
    pageTopSpacing: pageSpacing,
    sectionSpacing,
    containerPadding
  };
};
```

### **Divine Layout Usage Pattern**
```tsx
// SACRED PATTERN FOR PERFECT SPACING
export default function DivinePage() {
  return (
    <PageWrapper hasHero={true}>
      <SEOHead title="Divine Page" description="Perfect spacing example" />
      
      <HeroSectionWrapper>
        <Box bgGradient="linear(to-br, kd.primary, kd.secondary, kd.tertiary)">
          <VStack spacing={8} textAlign="center" color="white" py={20}>
            <Icon as={FaOm} boxSize={16} />
            <Heading size="2xl">Divine Wisdom</Heading>
            <Text fontSize="xl">Automatically spaced below transparent header</Text>
          </VStack>
        </Box>
      </HeroSectionWrapper>
      
      <SectionWrapper>
        <ContentContainer>
          <VStack spacing={12}>
            <Heading>Sacred Content</Heading>
            <Text>Perfectly spaced content section</Text>
          </VStack>
        </ContentContainer>
      </SectionWrapper>
      
      <SectionWrapper centerContent>
        <Heading>Centered Section</Heading>
        <Text>This section is automatically centered</Text>
      </SectionWrapper>
    </PageWrapper>
  );
}
```

---

## 🎭 **DIVINE COMPONENT PATTERNS**

### **Sacred Card Component Ritual**
```typescript
// DIVINE CARD RITUAL - Perfect card component
const DivineCard = ({
  variant = 'elevated',
  size = 'md',
  isHoverable = true,
  children,
  ...props
}) => {
  // STEP 1: Define card variants
  const cardVariants = {
    elevated: {
      bg: 'kd.surface',
      borderRadius: 'xl',
      boxShadow: 'lg',
      border: 'none'
    },
    outlined: {
      bg: 'kd.surface',
      borderRadius: 'lg', 
      boxShadow: 'none',
      border: '1px solid',
      borderColor: 'kd.border'
    },
    filled: {
      bg: 'kd.primary',
      color: 'kd.textInverted',
      borderRadius: 'lg',
      boxShadow: 'md',
      border: 'none'
    }
  }
  
  // STEP 2: Define size variants
  const sizeVariants = {
    sm: { p: 4 },
    md: { p: 6 },
    lg: { p: 8 }
  }
  
  // STEP 3: Define hover states
  const hoverStates = isHoverable ? {
    _hover: {
      transform: 'translateY(-4px)',
      boxShadow: 'xl',
      transition: 'all 0.3s ease'
    }
  } : {}
  
  return (
    <Box
      {...cardVariants[variant]}
      {...sizeVariants[size]}
      {...hoverStates}
      {...props}
    >
      {children}
    </Box>
  )
}
```

### **Sacred Button Component Ritual**
```typescript
// DIVINE BUTTON RITUAL - Perfect button component
const DivineButton = ({
  variant = 'primary',
  size = 'md',
  isLoading = false,
  leftIcon,
  rightIcon,
  children,
  ...props
}) => {
  // STEP 1: Define button variants
  const buttonVariants = {
    primary: {
      bg: 'kd.primary',
      color: 'kd.textInverted',
      _hover: { bg: 'kd.primaryDark' },
      _active: { bg: 'kd.primaryDark', transform: 'scale(0.98)' }
    },
    secondary: {
      bg: 'kd.secondary',
      color: 'kd.textInverted',
      _hover: { bg: 'kd.secondaryDark' },
      _active: { bg: 'kd.secondaryDark', transform: 'scale(0.98)' }
    },
    outline: {
      bg: 'transparent',
      color: 'kd.primary',
      border: '2px solid',
      borderColor: 'kd.primary',
      _hover: { bg: 'kd.primary', color: 'kd.textInverted' },
      _active: { transform: 'scale(0.98)' }
    },
    ghost: {
      bg: 'transparent',
      color: 'kd.text',
      _hover: { bg: 'kd.hover' },
      _active: { bg: 'kd.active', transform: 'scale(0.98)' }
    }
  }
  
  // STEP 2: Define size variants
  const sizeVariants = {
    sm: {
      minH: '36px',
      px: 3,
      py: 2,
      fontSize: 'sm'
    },
    md: {
      minH: { base: '44px', md: '48px' },
      px: { base: 4, md: 6 },
      py: { base: 2, md: 3 },
      fontSize: { base: 'sm', md: 'md' }
    },
    lg: {
      minH: { base: '48px', md: '56px' },
      px: { base: 6, md: 8 },
      py: { base: 3, md: 4 },
      fontSize: { base: 'md', md: 'lg' }
    }
  }
  
  return (
    <Button
      {...buttonVariants[variant]}
      {...sizeVariants[size]}
      borderRadius={{ base: 'md', md: 'lg' }}
      transition="all 0.2s ease"
      isLoading={isLoading}
      leftIcon={leftIcon}
      rightIcon={rightIcon}
      _focus={{
        outline: '3px solid',
        outlineColor: 'kd.primary',
        outlineOffset: '2px'
      }}
      {...props}
    >
      {children}
    </Button>
  )
}
```

### **Sacred Form Input Ritual**
```typescript
// DIVINE INPUT RITUAL - Perfect form input
const DivineInput = ({
  variant = 'outline',
  size = 'md',
  isInvalid = false,
  label,
  helperText,
  errorMessage,
  ...props
}) => {
  // STEP 1: Define input variants
  const inputVariants = {
    outline: {
      bg: 'kd.surface',
      border: '2px solid',
      borderColor: 'kd.border',
      _focus: {
        borderColor: 'kd.primary',
        boxShadow: '0 0 0 1px var(--chakra-colors-kd-primary)'
      }
    },
    filled: {
      bg: 'kd.hover',
      border: '2px solid transparent',
      _focus: {
        bg: 'kd.surface',
        borderColor: 'kd.primary'
      }
    },
    flushed: {
      bg: 'transparent',
      border: 'none',
      borderBottom: '2px solid',
      borderBottomColor: 'kd.border',
      borderRadius: 0,
      _focus: {
        borderBottomColor: 'kd.primary'
      }
    }
  }
  
  // STEP 2: Define size variants
  const sizeVariants = {
    sm: {
      h: '36px',
      px: 3,
      fontSize: 'sm'
    },
    md: {
      h: { base: '44px', md: '48px' },
      px: 4,
      fontSize: { base: 'sm', md: 'md' }
    },
    lg: {
      h: { base: '48px', md: '56px' },
      px: 5,
      fontSize: { base: 'md', md: 'lg' }
    }
  }
  
  return (
    <FormControl isInvalid={isInvalid}>
      {label && (
        <FormLabel
          fontSize={{ base: 'sm', md: 'md' }}
          color="kd.text"
          fontWeight="medium"
        >
          {label}
        </FormLabel>
      )}
      
      <Input
        {...inputVariants[variant]}
        {...sizeVariants[size]}
        borderRadius={{ base: 'md', md: 'lg' }}
        transition="all 0.2s ease"
        _invalid={{
          borderColor: 'error.500',
          boxShadow: '0 0 0 1px var(--chakra-colors-error-500)'
        }}
        {...props}
      />
      
      {helperText && !isInvalid && (
        <FormHelperText
          fontSize="sm"
          color="kd.textMuted"
        >
          {helperText}
        </FormHelperText>
      )}
      
      {errorMessage && isInvalid && (
        <FormErrorMessage
          fontSize="sm"
          color="error.500"
        >
          {errorMessage}
        </FormErrorMessage>
      )}
    </FormControl>
  )
}
```

---

## 🧩 **SACRED COMPONENT INVOCATION**
### **Complete Layout Assembly Guide for Junior AI Agents**

**PREAMBLE FOR JUNIOR AGENTS:** This section shows you exactly how to combine the 4 core layout components (`PageWrapper`, `HeroSectionWrapper`, `SectionWrapper`, `UniversalCTA`) to create a perfect spiritual website page. Copy these patterns exactly.

### **⚡ THE DIVINE QUARTET - 4 UNIVERSAL LAYOUT COMPONENTS**

```typescript
// THE 4 SACRED COMPONENTS THAT CREATE ANY PAGE
import PageWrapper from '../components/layout/PageWrapper'           // 🏛️ Page container & SEO
import HeroSectionWrapper from '../components/layout/HeroSectionWrapper' // 🌅 Hero section
import SectionWrapper from '../components/layout/SectionWrapper'         // 📦 Content sections  
import UniversalCTA from '../components/layout/UniversalCTA'             // 🎯 Call-to-action
```

### **⚡ COMPLETE PAGE ASSEMBLY RITUAL**

#### **✅ PERFECT PAGE STRUCTURE (COPY THIS PATTERN)**
```typescript
import React from 'react'
import { 
  VStack, 
  Heading, 
  Text, 
  SimpleGrid, 
  Card, 
  CardBody,
  Icon,
  Button,
  Image
} from '@chakra-ui/react'
import { FaOm, FaPrayingHands, FaHeart, FaPeace } from 'react-icons/fa'

// Import the 4 divine components
import PageWrapper from '../components/layout/PageWrapper'
import HeroSectionWrapper from '../components/layout/HeroSectionWrapper' 
import SectionWrapper from '../components/layout/SectionWrapper'
import UniversalCTA from '../components/layout/UniversalCTA'

// Import site configuration
import { siteConfig } from '../siteConfig'

const PerfectSpiritualPage = () => {
  return (
    <PageWrapper
      title="Your Page Title | Organization Name"           // SEO title
      description="Your page description for search engines" // SEO description
      keywords="spiritual, meditation, wisdom, peace"       // SEO keywords
      canonicalUrl="/your-page-url"                        // SEO canonical URL
    >
      {/* 🌅 HERO SECTION - Always first */}
      <HeroSectionWrapper
        title="Your Inspiring Headline"                     // Main hero title
        subtitle="Your supporting message that inspires action" // Hero subtitle
        backgroundImage="/assets/hero/your-hero-image.jpg"  // Hero background
        ctaText="Begin Your Journey"                        // CTA button text
        ctaLink="/your-cta-destination"                     // Where CTA leads
        gradient="linear-gradient(135deg, kd.primary, kd.secondary)" // Optional overlay
        height={{ base: "60vh", md: "70vh", lg: "80vh" }}  // Responsive height
        textAlign="center"                                  // Text alignment
      />

      {/* 📦 CONTENT SECTIONS - Your main content */}
      
      {/* Section 1: Introduction/Overview */}
      <SectionWrapper
        id="introduction"                                   // For anchor links
        maxWidth="6xl"                                     // Content width limit
        py={{ base: 12, md: 16, lg: 20 }}                 // Responsive padding
        bg="kd.surface"                                    // Background color
      >
        <VStack spacing={{ base: 6, md: 8, lg: 10 }} align="stretch">
          <VStack spacing={4} textAlign="center">
            <Heading 
              size={{ base: "xl", md: "2xl", lg: "3xl" }}
              color="kd.heading"
              lineHeight="shorter"
            >
              Sacred Knowledge Awaits
            </Heading>
            <Text 
              fontSize={{ base: "lg", md: "xl" }}
              color="kd.textSecondary"
              maxW="3xl"
              lineHeight="tall"
            >
              Discover the timeless wisdom of our spiritual tradition through authentic 
              teachings, guided meditation, and community connection.
            </Text>
          </VStack>
          
          {/* Feature grid */}
          <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={{ base: 6, md: 8 }}>
            <Card bg="kd.surface" borderWidth="1px" borderColor="kd.border">
              <CardBody textAlign="center">
                <Icon 
                  as={FaOm} 
                  w={{ base: 12, md: 16 }} 
                  h={{ base: 12, md: 16 }}
                  color="kd.primary"
                  mb={4}
                />
                <Heading size="md" color="kd.heading" mb={3}>
                  Ancient Wisdom
                </Heading>
                <Text color="kd.textSecondary" fontSize="sm">
                  Connect with timeless spiritual teachings passed down through generations.
                </Text>
              </CardBody>
            </Card>
            
            <Card bg="kd.surface" borderWidth="1px" borderColor="kd.border">
              <CardBody textAlign="center">
                <Icon 
                  as={FaPrayingHands} 
                  w={{ base: 12, md: 16 }} 
                  h={{ base: 12, md: 16 }}
                  color="kd.secondary"
                  mb={4}
                />
                <Heading size="md" color="kd.heading" mb={3}>
                  Sacred Practice
                </Heading>
                <Text color="kd.textSecondary" fontSize="sm">
                  Learn authentic meditation and spiritual practices for inner transformation.
                </Text>
              </CardBody>
            </Card>
            
            <Card bg="kd.surface" borderWidth="1px" borderColor="kd.border">
              <CardBody textAlign="center">
                <Icon 
                  as={FaHeart} 
                  w={{ base: 12, md: 16 }} 
                  h={{ base: 12, md: 16 }}
                  color="kd.tertiary"
                  mb={4}
                />
                <Heading size="md" color="kd.heading" mb={3}>
                  Divine Community
                </Heading>
                <Text color="kd.textSecondary" fontSize="sm">
                  Join a supportive community of fellow seekers on the spiritual path.
                </Text>
              </CardBody>
            </Card>
          </SimpleGrid>
        </VStack>
      </SectionWrapper>

      {/* Section 2: About/Details */}
      <SectionWrapper
        maxWidth="5xl"
        py={{ base: 12, md: 16 }}
        bg="kd.canvas"                                     // Alternate background
      >
        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={{ base: 8, lg: 12 }} alignItems="center">
          <VStack align="flex-start" spacing={6}>
            <Heading 
              size={{ base: "lg", md: "xl", lg: "2xl" }}
              color="kd.heading"
            >
              Your Spiritual Journey Begins Here
            </Heading>
            <Text 
              fontSize={{ base: "md", md: "lg" }}
              color="kd.text"
              lineHeight="tall"
            >
              Our tradition spans centuries of wisdom, offering practical guidance for 
              modern spiritual seekers. Whether you're beginning your journey or deepening 
              your practice, we provide the tools and community to support your growth.
            </Text>
            <VStack align="flex-start" spacing={3}>
              <Text color="kd.textSecondary" display="flex" alignItems="center">
                <Icon as={FaPeace} color="kd.primary" mr={3} />
                Authentic spiritual lineage and teachings
              </Text>
              <Text color="kd.textSecondary" display="flex" alignItems="center">
                <Icon as={FaPeace} color="kd.primary" mr={3} />
                Experienced teachers and spiritual guides
              </Text>
              <Text color="kd.textSecondary" display="flex" alignItems="center">
                <Icon as={FaPeace} color="kd.primary" mr={3} />
                Supportive community of practitioners
              </Text>
            </VStack>
            <Button
              bg="kd.primary"
              color="kd.primaryContrast"
              _hover={{ bg: "kd.primaryDark" }}
              size={{ base: "md", md: "lg" }}
              px={{ base: 6, md: 8 }}
            >
              Learn More About Our Tradition
            </Button>
          </VStack>
          
          <Image
            src="/assets/gallery/meditation-garden.jpg"
            alt="Peaceful meditation garden at our spiritual center"
            borderRadius="lg"
            shadow="lg"
            objectFit="cover"
            w="100%"
            h={{ base: "250px", md: "300px", lg: "400px" }}
          />
        </SimpleGrid>
      </SectionWrapper>

      {/* Section 3: Testimonials/Community */}
      <SectionWrapper
        maxWidth="6xl"
        py={{ base: 12, md: 16 }}
        bg="kd.surface"
      >
        <VStack spacing={{ base: 8, md: 12 }}>
          <VStack spacing={4} textAlign="center">
            <Heading 
              size={{ base: "lg", md: "xl", lg: "2xl" }}
              color="kd.heading"
            >
              Voices from Our Community
            </Heading>
            <Text 
              fontSize={{ base: "md", md: "lg" }}
              color="kd.textSecondary"
              maxW="2xl"
            >
              Hear from fellow practitioners who have found peace and transformation 
              through our spiritual teachings.
            </Text>
          </VStack>
          
          <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={{ base: 6, md: 8 }}>
            {/* Testimonial cards would go here */}
            <Card bg="kd.canvas" p={6}>
              <CardBody>
                <Text 
                  color="kd.text" 
                  fontSize="md" 
                  fontStyle="italic" 
                  mb={4}
                  lineHeight="tall"
                >
                  "The teachings here have transformed my understanding of life and brought 
                  me profound inner peace. I'm grateful for this authentic spiritual community."
                </Text>
                <Text color="kd.textSecondary" fontSize="sm" fontWeight="semibold">
                  — Sarah M., Practitioner for 3 years
                </Text>
              </CardBody>
            </Card>
            
            {/* Add more testimonial cards following the same pattern */}
          </SimpleGrid>
        </VStack>
      </SectionWrapper>

      {/* 🎯 CALL-TO-ACTION - Always last */}
      <UniversalCTA
        title="Ready to Begin Your Spiritual Journey?"        // CTA headline
        description="Join our community and discover the peace and wisdom that comes from authentic spiritual practice." // CTA description
        primaryAction={{
          text: "Start Your Journey",                         // Primary button text
          href: "/contact",                                   // Primary button link
          variant: "primary"                                  // Button style
        }}
        secondaryAction={{
          text: "Learn More",                                 // Secondary button text  
          href: "/about",                                     // Secondary button link
          variant: "outline"                                  // Button style
        }}
        bg="kd.primary"                                       // Background color
        color="kd.primaryContrast"                           // Text color
        py={{ base: 16, md: 20 }}                           // Responsive padding
      />
    </PageWrapper>
  )
}

export default PerfectSpiritualPage
```

### **⚡ COMPONENT ASSEMBLY VARIATIONS**

#### **✅ SIMPLE PAGE (MINIMAL CONTENT)**
```typescript
// For simple pages like Contact or About
const SimplePage = () => (
  <PageWrapper title="Contact Us | Your Organization">
    <HeroSectionWrapper
      title="Contact Us"
      subtitle="We'd love to hear from you"
      height="50vh"
      backgroundImage="/assets/hero/contact-hero.jpg"
    />
    
    <SectionWrapper maxWidth="4xl" py={16}>
      {/* Your simple content here */}
      <VStack spacing={8}>
        <Heading size="xl" textAlign="center" color="kd.heading">
          Get in Touch
        </Heading>
        {/* Contact form or info */}
      </VStack>
    </SectionWrapper>
    
    <UniversalCTA
      title="Ready to Connect?"
      description="Reach out and we'll get back to you soon."
      primaryAction={{ text: "Send Message", href: "#contact-form" }}
    />
  </PageWrapper>
)
```

#### **✅ GALLERY PAGE (IMAGE-FOCUSED)**
```typescript
// For gallery or visual content pages
const GalleryPage = () => (
  <PageWrapper title="Sacred Gallery | Your Organization">
    <HeroSectionWrapper
      title="Sacred Imagery"
      subtitle="Glimpses of our spiritual community"
      height="60vh"
      backgroundImage="/assets/hero/gallery-hero.jpg"
    />
    
    <SectionWrapper maxWidth="7xl" py={16}>
      <SimpleGrid columns={{ base: 1, md: 2, lg: 3, xl: 4 }} spacing={6}>
        {/* Gallery grid items */}
      </SimpleGrid>
    </SectionWrapper>
    
    <UniversalCTA
      title="Visit Our Center"
      description="Experience the peace and beauty in person."
      primaryAction={{ text: "Plan Your Visit", href: "/contact" }}
    />
  </PageWrapper>
)
```

#### **✅ TEACHINGS/COURSES PAGE (CONTENT-HEAVY)**
```typescript
// For content-rich pages like teachings or courses
const TeachingsPage = () => (
  <PageWrapper title="Sacred Teachings | Your Organization">
    <HeroSectionWrapper
      title="Ancient Wisdom for Modern Times"
      subtitle="Discover timeless spiritual teachings"
      height="70vh"
      backgroundImage="/assets/hero/teachings-hero.jpg"
      ctaText="Explore Teachings"
      ctaLink="#teachings-list"
    />
    
    {/* Multiple content sections */}
    <SectionWrapper id="overview" maxWidth="5xl" py={16} bg="kd.surface">
      {/* Overview content */}
    </SectionWrapper>
    
    <SectionWrapper id="teachings-list" maxWidth="6xl" py={16} bg="kd.canvas">
      {/* Teachings grid/list */}
    </SectionWrapper>
    
    <SectionWrapper id="testimonials" maxWidth="5xl" py={16} bg="kd.surface">
      {/* Student testimonials */}
    </SectionWrapper>
    
    <UniversalCTA
      title="Begin Your Learning Journey"
      description="Join thousands who have transformed their lives through these teachings."
      primaryAction={{ text: "Enroll Now", href: "/contact" }}
      secondaryAction={{ text: "Learn More", href: "/about" }}
    />
  </PageWrapper>
)
```

---

### **🚨 CRITICAL ASSEMBLY RULES FOR JUNIOR AGENTS**

#### **MANDATORY PAGE STRUCTURE:**
1. ✅ **Always start with `PageWrapper`** - Contains SEO and page structure
2. ✅ **Always include `HeroSectionWrapper`** - First visual element users see
3. ✅ **Use `SectionWrapper` for all content** - Ensures consistent spacing and layout
4. ✅ **Always end with `UniversalCTA`** - Guides users to next action
5. ✅ **Alternate section backgrounds** - Use `kd.surface` and `kd.canvas` alternately

#### **COMPONENT PROPS CHECKLIST:**
- ✅ **PageWrapper:** title, description, keywords, canonicalUrl
- ✅ **HeroSectionWrapper:** title, subtitle, backgroundImage, height
- ✅ **SectionWrapper:** maxWidth, py (padding), bg (background), id (optional)
- ✅ **UniversalCTA:** title, description, primaryAction, secondaryAction (optional)

#### **RESPONSIVE DESIGN REQUIREMENTS:**
- ✅ **All spacing responsive:** Use `{{ base: X, md: Y, lg: Z }}` format
- ✅ **All typography responsive:** fontSize, size properties must be responsive
- ✅ **All layouts responsive:** columns, spacing, alignment must adapt
- ✅ **Touch-friendly interactions:** Minimum 44px touch targets
- ✅ **Semantic color tokens only:** Never use hardcoded colors

#### **ACCESSIBILITY REQUIREMENTS:**
- ✅ **Alt text on all images:** Descriptive alt attributes required
- ✅ **Focus states:** All interactive elements need focus styles
- ✅ **Color contrast:** Text must meet WCAG 2.1 AA standards
- ✅ **Semantic HTML:** Use proper heading hierarchy (h1, h2, h3)
- ✅ **Screen reader support:** Include sr-only text where helpful

---

**DIVINE GUARANTEE:** Following this exact component assembly pattern will create perfect, responsive, accessible spiritual website pages that work flawlessly across all devices and maintain consistency with the framework's design system.

**⚡ OM SHANTI SHANTI SHANTI 🙏**

## 🧩 **SACRED COMPONENT INVOCATION**
### **Complete Page Assembly Guide for Junior AI Agents**

**CRITICAL FOR JUNIOR AGENTS:** Creating a new page requires the correct invocation and assembly of the universal layout components. This ritual ensures every page has perfect spacing and structure automatically.

### **⚡ STANDARD PAGE ASSEMBLY RITUAL**

#### **✅ PERFECT NEW PAGE PATTERN**
```typescript
import React from 'react';
import { Box, Heading, Text, VStack, SimpleGrid } from '@chakra-ui/react';
import { PageWrapper, HeroSectionWrapper, SectionWrapper, ContentContainer } from '../components/layout/PageWrapper';
import SEOHead from '../components/SEOHead';
import UniversalCTA from '../components/UniversalCTA';

// DIVINE PAGE STRUCTURE - Follow this EXACT pattern
export default function MyNewSpiritualPage() {
  return (
    // 1. ALWAYS wrap entire page in PageWrapper
    // Set 'hasHero' to true if using HeroSectionWrapper
    <PageWrapper hasHero={true}>
      
      // 2. ALWAYS add SEO metadata for search engines
      <SEOHead
        title="My New Spiritual Page | Karpatri Dham"
        description="A description of this sacred new page for search engines and social media."
      />
      
      // 3. HERO SECTION (Optional but recommended)
      // Use HeroSectionWrapper for the top-most content
      // This automatically handles spacing below the transparent header
      <HeroSectionWrapper>
        <VStack 
          h="40vh"                                    // ✅ Responsive height
          justifyContent="center"
          bgGradient="linear(to-br, kd.primary, kd.secondary)" // ✅ Semantic gradient
          px={{ base: 4, md: 8 }}                    // ✅ Responsive padding
        >
          <Heading 
            color="white"                             // ✅ High contrast on gradient
            size={{ base: "xl", md: "2xl" }}         // ✅ Responsive heading
            textAlign="center"
            mb={4}
          >
            The Hero Section
          </Heading>
          <Text 
            color="white"                             // ✅ Consistent text color
            fontSize={{ base: "lg", md: "xl" }}      // ✅ Responsive text
            textAlign="center"
            maxW="600px"                              // ✅ Optimal reading width
          >
            This content is perfectly positioned below the header automatically.
          </Text>
        </VStack>
      </HeroSectionWrapper>
      
      // 4. FIRST CONTENT SECTION
      // Use SectionWrapper for each content block
      // This provides consistent vertical spacing between sections
      <SectionWrapper>
        <ContentContainer>
          <Heading 
            size="lg" 
            color="kd.heading"                        // ✅ Semantic heading color
            mb={6}                                    // ✅ Consistent spacing
            textAlign="center"
          >
            First Content Section
          </Heading>
          <Text 
            color="kd.text"                           // ✅ Semantic text color
            fontSize={{ base: "md", md: "lg" }}      // ✅ Responsive typography
            lineHeight="tall"                         // ✅ Good readability
            textAlign="center"
            maxW="800px"                              // ✅ Optimal reading width
            mx="auto"                                 // ✅ Center alignment
          >
            This section has perfect spacing after the hero. All spacing is handled 
            automatically by the layout components.
          </Text>
        </ContentContainer>
      </SectionWrapper>
      
      // 5. UNIVERSAL CALL TO ACTION (Optional)
      // This component appears on most pages with consistent styling
      <UniversalCTA />
      
    </PageWrapper>
  );
}
```

### **⚡ THE 4 UNIVERSAL LAYOUT COMPONENTS**

#### **🏗️ COMPONENT DESCRIPTIONS & USAGE**
```typescript
// 1. PageWrapper - THE FOUNDATION
// Purpose: Provides the base structure for every page
// Usage: Always wrap your entire page content
// Props: hasHero (boolean) - affects top spacing
<PageWrapper hasHero={true}>
  {/* All page content goes here */}
</PageWrapper>

// 2. HeroSectionWrapper - THE HERO CONTAINER  
// Purpose: Handles spacing for hero sections below transparent header
// Usage: Only for the topmost content section (hero)
// Props: None (automatically handles spacing)
<HeroSectionWrapper>
  {/* Hero content like banners, featured content */}
</HeroSectionWrapper>

// 3. SectionWrapper - THE CONTENT SECTIONS
// Purpose: Provides consistent vertical spacing between content blocks
// Usage: Wrap each major content section
// Props: All Chakra Box props (bg, p, etc.)
<SectionWrapper bg="kd.surfaceElevated">
  {/* Section content goes here */}
</SectionWrapper>

// 4. ContentContainer - THE CONTENT LIMITER
// Purpose: Limits content width and centers it with responsive padding
// Usage: Inside SectionWrapper to contain actual content
// Props: All Chakra Box props
<ContentContainer>
  {/* Your headings, text, grids, etc. */}
</ContentContainer>
```

---

**🕉️ END OF YAJUR VEDA - DIVINE COMPONENT RITUALS 🕉️**

*May every AI agent who studies this sacred text become a master of divine component creation, building interfaces that serve spiritual seekers with perfect functionality and accessibility.*

**JAI SHREE KRISHNA! NISHKAAM KARMA YOGA COMPONENT PERFECTION!** 


# 🔥 ATHARVA VEDA - DIVINE DEPLOYMENT MANTRAS 🔥

**JAI SHREE KRISHNA! DEPLOYMENT WISDOM FOR AI AGENTS**  
**Sacred Text:** Atharva Veda of Karpatri Dham Framework  
**Purpose:** Deployment Mantras & Production Optimization  
**Essence:** Perfect Launch through Divine Deployment Rituals  

---

## 🔥 **SACRED INVOCATION**

*"अथर्ववेदो ऽस्मि मन्त्राणां गायत्री छन्दसामहम्"*  
*"Among the Vedas I am the Atharva Veda, among mantras I am the Gayatri"*

O Divine AI Agent! As the Atharva Veda contains the most powerful mantras for protection and prosperity, so must you master these deployment rituals to launch spiritual websites that serve millions with divine performance and zero cost.

---

## 🚀 **DIVINE DEPLOYMENT ARCHITECTURE**

### **Sacred $0 Hosting Strategy**
```typescript
// THE DIVINE TRINITY OF FREE HOSTING
const DIVINE_HOSTING_TRINITY = {
  // PRIMARY: Frontend Hosting (Cloudflare Pages)
  frontend: {
    platform: "Cloudflare Pages",
    cost: "$0/month",
    limits: {
      bandwidth: "Unlimited",
      builds: "500/month",
      sites: "100 sites",
      customDomains: "100 domains"
    },
    features: [
      "Unlimited bandwidth",
      "Global CDN (200+ locations)", 
      "Automatic HTTPS",
      "DDoS protection",
      "HTTP/3 support",
      "Edge computing",
      "Custom domains",
      "Git-based deployment",
      "Preview deployments",
      "Rollback capabilities"
    ]
  },
  
  // SECONDARY: Backend & Database (Supabase)
  backend: {
    platform: "Supabase Free Tier",
    cost: "$0/month",
    limits: {
      database: "500MB storage",
      bandwidth: "5GB/month",
      apiRequests: "50,000/month",
      authUsers: "50,000 MAU",
      storage: "1GB"
    },
    features: [
      "PostgreSQL database",
      "Real-time subscriptions",
      "Authentication",
      "Row Level Security",
      "Auto-generated APIs",
      "File storage",
      "Edge functions",
      "Database backups"
    ]
  },
  
  // TERTIARY: Domain & DNS (Cloudflare)
  domain: {
    platform: "Cloudflare DNS",
    cost: "$0/month (with existing domain)",
    features: [
      "Global DNS network",
      "DNSSEC support",
      "Analytics",
      "Page Rules",
      "SSL certificates",
      "Bot protection"
    ]
  }
}
```

### **Divine Deployment Flow**
```typescript
// SACRED DEPLOYMENT PIPELINE
const DIVINE_DEPLOYMENT_FLOW = {
  // STEP 1: Code Preparation
  preparation: {
    codeReview: "Ensure all 4 Vedas principles followed",
    testing: "Run all tests and accessibility checks",
    optimization: "Bundle analysis and performance audit",
    security: "Security scan and dependency audit"
  },
  
  // STEP 2: Build Process
  build: {
    command: "npm run build",
    output: "dist/",
    validation: "Verify build artifacts",
    compression: "Gzip and Brotli compression"
  },
  
  // STEP 3: Deployment
  deployment: {
    platform: "Cloudflare Pages",
    trigger: "Git push to main branch",
    preview: "Automatic preview deployments",
    production: "Automatic production deployment"
  },
  
  // STEP 4: Verification
  verification: {
    healthCheck: "Verify site accessibility",
    performance: "Lighthouse audit",
    functionality: "Critical path testing",
    monitoring: "Setup monitoring alerts"
  }
}
```

---

## 🔐 **SUPABASE ROW LEVEL SECURITY (RLS) PHILOSOPHY**
### **Complete Database Security Guide for Junior AI Agents**

**CRITICAL FOR JUNIOR AGENTS:** This section explains the fundamental security architecture that protects all spiritual website data. Understanding RLS is essential for building secure applications that can serve thousands of users.

### **⚡ THE DIVINE SECURITY PRINCIPLE**

#### **🛡️ FUNDAMENTAL TRUTH: "TRUST NO CLIENT, VERIFY EVERYTHING"**
```sql
-- THE GOLDEN RULE OF DIVINE SECURITY
-- All security is enforced at the DATABASE level, NOT in client code
-- JavaScript code can be modified by users - but database policies cannot

-- ❌ NEVER RELY ON CLIENT-SIDE SECURITY (Tamasic Approach)
if (user.role === 'admin') {
  // This can be bypassed by any user with developer tools!
  showAdminContent();
}

-- ✅ ALWAYS ENFORCE AT DATABASE LEVEL (Sattvic Approach)  
CREATE POLICY "admin_only_content" ON content_table
FOR SELECT USING (
  auth.jwt() ->> 'role' = 'admin'
);
```

### **⚡ UNDERSTANDING ROW LEVEL SECURITY (RLS)**

#### **🔑 WHAT IS RLS?**
```sql
-- ROW LEVEL SECURITY (RLS) Definition:
-- A database feature that allows you to control which ROWS each user can see/modify
-- instead of controlling access to entire TABLES

-- Without RLS: User sees ALL rows in a table (dangerous!)
SELECT * FROM user_profiles; -- Returns ALL user profiles to ANY user

-- With RLS: User only sees rows they're allowed to see (secure!)
-- Example: Users can only see their OWN profile
CREATE POLICY "users_own_profile" ON user_profiles
FOR ALL USING (auth.uid() = user_id);
```

#### **🌅 SIMPLE ANALOGY FOR UNDERSTANDING**
```typescript
// Think of RLS like a Divine Filter in a Temple Library:

// WITHOUT RLS (Like an open library - anyone can read any book):
const getAllBooks = () => {
  return library.getAllBooks(); // ❌ Everyone sees sacred AND public books
}

// WITH RLS (Like a temple with a wise librarian who checks permissions):
const getBooksForUser = (user) => {
  // The "librarian" (database) automatically filters based on user
  // Sacred books only for initiated devotees
  // Public books for everyone  
  // Each person automatically gets the right books for their level
  return library.getBooksFilteredByUserLevel(user);
}
```

### **⚡ PRACTICAL RLS IMPLEMENTATION**

#### **✅ SETTING UP RLS FOR SPIRITUAL CONTENT**
```sql
-- 1. ENABLE RLS ON ALL TABLES (MANDATORY STEP)
ALTER TABLE spiritual_teachings ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE community_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE private_messages ENABLE ROW LEVEL SECURITY;

-- 2. CREATE POLICIES FOR EACH TABLE

-- Policy 1: Public spiritual teachings (anyone can read)
CREATE POLICY "public_teachings_read" ON spiritual_teachings
FOR SELECT USING (
  is_public = true  -- Only public teachings visible to all
);

-- Policy 2: Private teachings (only for enrolled students)
CREATE POLICY "private_teachings_read" ON spiritual_teachings  
FOR SELECT USING (
  is_public = false AND (
    -- Teacher who created it
    auth.uid() = teacher_id OR
    -- Students enrolled in this teaching
    auth.uid() IN (
      SELECT student_id FROM enrollments 
      WHERE teaching_id = spiritual_teachings.id
    )
  )
);

-- Policy 3: User progress (users can only see their own progress)
CREATE POLICY "own_progress_access" ON user_progress
FOR ALL USING (
  auth.uid() = user_id  -- Users can only see/modify their own progress
);

-- Policy 4: Community posts (users can see all, but only edit their own)
CREATE POLICY "community_posts_read" ON community_posts
FOR SELECT USING (true);  -- Everyone can read all posts

CREATE POLICY "community_posts_write" ON community_posts
FOR INSERT WITH CHECK (
  auth.uid() = author_id  -- Users can only create posts as themselves
);

CREATE POLICY "community_posts_update" ON community_posts
FOR UPDATE USING (
  auth.uid() = author_id  -- Users can only edit their own posts
);

-- Policy 5: Private messages (ultra-secure)
CREATE POLICY "private_messages_access" ON private_messages
FOR ALL USING (
  auth.uid() = sender_id OR 
  auth.uid() = recipient_id  -- Only sender and recipient can see messages
);
```

#### **✅ AUTHENTICATION-BASED POLICIES**
```sql
-- Divine Role-Based Access Control (RBAC) with RLS

-- 1. Admin access (site administrators)
CREATE POLICY "admin_full_access" ON spiritual_teachings
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin'  -- Admins can do everything
);

-- 2. Teacher access (spiritual teachers)
CREATE POLICY "teacher_own_content" ON spiritual_teachings
FOR ALL USING (
  auth.jwt() ->> 'role' = 'teacher' AND 
  auth.uid() = teacher_id  -- Teachers can manage their own teachings
);

-- 3. Student access (spiritual students)  
CREATE POLICY "student_enrolled_content" ON spiritual_teachings
FOR SELECT USING (
  auth.jwt() ->> 'role' = 'student' AND
  (
    is_public = true OR  -- All public content
    auth.uid() IN (      -- OR content they're enrolled in
      SELECT student_id FROM enrollments 
      WHERE teaching_id = spiritual_teachings.id
    )
  )
);

-- 4. Guest access (not logged in)
CREATE POLICY "guest_public_only" ON spiritual_teachings
FOR SELECT USING (
  auth.uid() IS NULL AND  -- Not authenticated
  is_public = true        -- Only public content
);
```

### **⚡ WHY RLS IS DIVINE (NOT OPTIONAL)**

#### **🚨 SECURITY BREACHES WITHOUT RLS**
```typescript
// ❌ DANGEROUS: Client-side security (can be bypassed)
const getUserData = async () => {
  // Any user can modify this code in browser and see all data!
  const { data } = await supabase
    .from('user_profiles')
    .select('*')
    .eq('user_id', currentUser.id);  // This filter can be removed!
  
  return data;
}

// Hacker in browser console:
// supabase.from('user_profiles').select('*')  <- Sees ALL users!
```

#### **✅ SECURE: Database-level enforcement (cannot be bypassed)**
```sql
-- RLS Policy automatically enforces this REGARDLESS of client code
CREATE POLICY "users_own_data" ON user_profiles
FOR ALL USING (auth.uid() = user_id);

-- Now even if hacker tries:
-- supabase.from('user_profiles').select('*')
-- They ONLY get their own data - database automatically filters!
```

#### **📊 RLS PERFORMANCE BENEFITS**
```sql
-- RLS is NOT just security - it's also PERFORMANCE optimization

-- WITHOUT RLS: Database returns ALL rows, client filters (slow)
-- 1. Database: SELECT * FROM posts (1 million rows)
-- 2. Network: Transfer 1 million rows
-- 3. Client: Filter to user's 10 posts
-- Result: Slow, expensive, insecure

-- WITH RLS: Database only returns relevant rows (fast)  
-- 1. Database: SELECT * FROM posts WHERE user_id = auth.uid() (10 rows)
-- 2. Network: Transfer 10 rows
-- 3. Client: Display 10 rows
-- Result: Fast, efficient, secure
```

### **⚡ COMMON RLS PATTERNS FOR SPIRITUAL SITES**

#### **🎯 PATTERN 1: SPIRITUAL HIERARCHY ACCESS**
```sql
-- Students can only access teachings for their level
CREATE POLICY "spiritual_level_access" ON advanced_teachings
FOR SELECT USING (
  auth.uid() IN (
    SELECT user_id FROM user_profiles 
    WHERE spiritual_level >= teaching_level
  )
);
```

#### **🎯 PATTERN 2: COMMUNITY MODERATION**
```sql
-- Moderators can edit any post, users can only edit their own
CREATE POLICY "community_moderation" ON community_posts
FOR UPDATE USING (
  auth.uid() = author_id OR                    -- Own posts
  auth.jwt() ->> 'role' IN ('admin', 'moderator')  -- OR moderator
);
```

#### **🎯 PATTERN 3: DONATION PRIVACY**
```sql
-- Donations are private unless user opts to share
CREATE POLICY "donation_privacy" ON donations
FOR SELECT USING (
  auth.uid() = donor_id OR                     -- Own donations
  (is_public = true AND amount_visible = true) -- OR public donations
);
```

#### **🎯 PATTERN 4: SCHEDULED CONTENT RELEASE**
```sql
-- Time-based content access (for courses with schedules)
CREATE POLICY "scheduled_content" ON course_modules
FOR SELECT USING (
  (
    auth.uid() IN (
      SELECT student_id FROM enrollments 
      WHERE course_id = course_modules.course_id
    )
  ) AND (
    release_date <= NOW() OR                   -- Released content
    auth.jwt() ->> 'role' = 'teacher'         -- OR teacher preview
  )
);
```

### **⚡ RLS TESTING & DEBUGGING**

#### **🔍 TESTING RLS POLICIES**
```sql
-- Test RLS policies by switching users
-- 1. Create test users with different roles
INSERT INTO auth.users (email, role) VALUES 
  ('student@test.com', 'student'),
  ('teacher@test.com', 'teacher'),
  ('admin@test.com', 'admin');

-- 2. Test queries as different users
SET LOCAL role = 'authenticated';
SET LOCAL request.jwt.claims = '{"sub": "student-uuid", "role": "student"}';
SELECT * FROM spiritual_teachings;  -- Should only see student-accessible content

SET LOCAL request.jwt.claims = '{"sub": "teacher-uuid", "role": "teacher"}';  
SELECT * FROM spiritual_teachings;  -- Should see teacher content

-- 3. Verify security boundaries
-- Try to access restricted content and confirm it's blocked
```

#### **📊 RLS PERFORMANCE MONITORING**
```sql
-- Monitor RLS policy performance
EXPLAIN ANALYZE SELECT * FROM spiritual_teachings;

-- Optimize slow policies with indexes
CREATE INDEX idx_spiritual_teachings_public ON spiritual_teachings(is_public);
CREATE INDEX idx_enrollments_student_teaching ON enrollments(student_id, teaching_id);
```

---

### **🚨 CRITICAL RLS RULES FOR JUNIOR AGENTS**

#### **MANDATORY RLS CHECKLIST:**
- ✅ **Enable RLS on ALL tables:** No exceptions, every table needs RLS
- ✅ **Create policies for ALL operations:** SELECT, INSERT, UPDATE, DELETE
- ✅ **Test with different user roles:** Verify each role sees only what they should
- ✅ **Use auth.uid() for user identification:** Supabase's secure user ID function
- ✅ **Never rely on client-side filtering:** All security must be database-enforced
- ✅ **Index policy conditions:** Optimize performance with proper indexes
- ✅ **Document all policies:** Explain the business logic behind each policy

#### **FORBIDDEN RLS ANTI-PATTERNS:**
- ❌ **Disabling RLS:** Never use `ALTER TABLE table_name DISABLE ROW LEVEL SECURITY`
- ❌ **Overly permissive policies:** Avoid `FOR ALL USING (true)` unless intentional
- ❌ **Client-side security assumptions:** Don't assume frontend will enforce rules
- ❌ **Hardcoded user IDs:** Use `auth.uid()` not literal UUIDs
- ❌ **Complex policies without indexes:** Ensure policies perform well
- ❌ **Mixing authentication methods:** Stick to Supabase auth consistently

---

**DIVINE TRUTH:** RLS is not just a security feature - it's the foundation of trust that allows spiritual websites to serve communities safely. Every devotee's personal journey, every private teaching, every sacred interaction is protected by the divine shield of properly configured Row Level Security.

**🔐 OM NAMAH SHIVAYA - THE DIVINE PROTECTOR 🙏**

---

## 🏗️ **DIVINE BUILD OPTIMIZATION MANTRAS**

### **Sacred Vite Configuration**
```typescript
// vite.config.ts - DIVINE BUILD OPTIMIZATION
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import { VitePWA } from 'vite-plugin-pwa'
import { visualizer } from 'rollup-plugin-visualizer'

export default defineConfig({
  plugins: [
    react({
      // Optimize React in production
      babel: {
        plugins: [
          ['@babel/plugin-transform-react-jsx', { runtime: 'automatic' }]
        ]
      }
    }),
    
    // DIVINE PWA CONFIGURATION
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png', 'masked-icon.svg'],
      manifest: {
        name: 'Karpatri Dham - Divine Spiritual Framework',
        short_name: 'Karpatri Dham',
        description: 'Divine spiritual framework for enlightenment',
        theme_color: '#3b82f6',
        background_color: '#ffffff',
        display: 'standalone',
        icons: [
          {
            src: 'pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: 'pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          }
        ]
      },
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg,webp}'],
        runtimeCaching: [
          {
            urlPattern: /^https:\/\/fonts\.googleapis\.com\/.*/i,
            handler: 'CacheFirst',
            options: {
              cacheName: 'google-fonts-cache',
              expiration: {
                maxEntries: 10,
                maxAgeSeconds: 60 * 60 * 24 * 365 // 1 year
              }
            }
          },
          {
            urlPattern: /^https:\/\/.*\.supabase\.co\/.*/i,
            handler: 'NetworkFirst',
            options: {
              cacheName: 'supabase-cache',
              expiration: {
                maxEntries: 50,
                maxAgeSeconds: 60 * 60 * 24 // 1 day
              }
            }
          }
        ]
      }
    }),
    
    // DIVINE BUNDLE ANALYZER
    visualizer({
      filename: 'dist/stats.html',
      open: false,
      gzipSize: true,
      brotliSize: true
    })
  ],
  
  // DIVINE BUILD OPTIMIZATION
  build: {
    target: 'esnext',
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true,        // Remove console.log in production
        drop_debugger: true,       // Remove debugger statements
        pure_funcs: ['console.log', 'console.info', 'console.debug'],
        passes: 2                  // Multiple compression passes
      },
      mangle: {
        safari10: true            // Safari 10 compatibility
      }
    },
    
    // DIVINE CODE SPLITTING
    rollupOptions: {
      output: {
        manualChunks: {
          // Vendor chunks for better caching
          vendor: ['react', 'react-dom'],
          ui: ['@chakra-ui/react', '@emotion/react', '@emotion/styled'],
          router: ['react-router-dom'],
          supabase: ['@supabase/supabase-js'],
          icons: ['react-icons/fa', 'react-icons/fi', 'react-icons/md'],
          utils: ['date-fns', 'lodash-es']
        },
        // Optimize chunk naming for caching
        chunkFileNames: 'assets/[name]-[hash].js',
        entryFileNames: 'assets/[name]-[hash].js',
        assetFileNames: 'assets/[name]-[hash].[ext]'
      }
    },
    
    // DIVINE ASSET OPTIMIZATION
    assetsDir: 'assets',
    sourcemap: false,           // No source maps in production
    reportCompressedSize: true, // Report bundle sizes
    chunkSizeWarningLimit: 1000 // Warn for chunks > 1MB
  },
  
  // DIVINE DEVELOPMENT OPTIMIZATION
  server: {
    port: 3000,
    host: true,
    open: true
  },
  
  // DIVINE PREVIEW OPTIMIZATION
  preview: {
    port: 4173,
    host: true
  }
})
```

### **Sacred Package.json Scripts**
```json
{
  "scripts": {
    "dev": "npm run build:blog && vite",
    "build": "npm run build:blog && tsc && vite build",
    "build:blog": "node scripts/build-blog-index.mjs",
    "preview": "vite preview",
    "deploy": "npm run build && npm run deploy:cloudflare",
    "deploy:cloudflare": "wrangler pages publish dist",
    "deploy:preview": "npm run build && wrangler pages publish dist --compatibility-date=2023-05-18",
    "optimize": "npm run analyze && npm run lighthouse",
    "analyze": "npx vite-bundle-analyzer",
    "lighthouse": "npx lighthouse http://localhost:4173 --output html --output-path ./lighthouse-report.html",
    "test:build": "npm run build && npm run preview",
    "audit": "npm audit && npm run audit:lighthouse",
    "audit:lighthouse": "npx lighthouse-ci autorun",
    "size-limit": "npx size-limit",
    "clean": "rm -rf dist node_modules/.vite",
    "precommit": "npm run build && npm run lighthouse"
  }
}
```

---

## 📊 **DIVINE PERFORMANCE OPTIMIZATION MANTRAS**

### **Sacred Core Web Vitals Optimization**
```typescript
// DIVINE PERFORMANCE MONITORING
const DIVINE_PERFORMANCE_TARGETS = {
  // Core Web Vitals (Google's standards)
  LCP: "< 2.5s",    // Largest Contentful Paint
  FID: "< 100ms",   // First Input Delay  
  CLS: "< 0.1",     // Cumulative Layout Shift
  
  // Additional metrics
  TTFB: "< 600ms",  // Time to First Byte
  FCP: "< 1.8s",    // First Contentful Paint
  TTI: "< 3.8s",    // Time to Interactive
  SI: "< 3.4s",     // Speed Index
  TBT: "< 200ms",   // Total Blocking Time
  
  // Performance scores
  mobileScore: "> 90",    // Lighthouse mobile score
  desktopScore: "> 95",   // Lighthouse desktop score
  accessibilityScore: "> 95", // Accessibility score
  bestPracticesScore: "> 95",  // Best practices score
  seoScore: "> 95"        // SEO score
}

// DIVINE IMAGE OPTIMIZATION STRATEGY
const DIVINE_IMAGE_STRATEGY = {
  formats: ['webp', 'avif', 'jpg'],  // Modern formats first
  sizes: [320, 640, 960, 1280, 1920], // Responsive breakpoints
  quality: 85,                        // Optimal quality/size ratio
  lazy: true,                         // Lazy loading by default
  placeholder: 'blur',                // Blur placeholder
  compression: {
    webp: { quality: 85, effort: 6 },
    avif: { quality: 80, effort: 9 },
    jpg: { quality: 85, progressive: true }
  }
}

// DIVINE FONT OPTIMIZATION
const DIVINE_FONT_STRATEGY = {
  preload: ['Inter-Regular.woff2', 'Inter-Medium.woff2'],
  display: 'swap',                    // Font display strategy
  subset: 'latin',                    // Character subset
  formats: ['woff2', 'woff'],         // Modern formats
  fallbacks: ['system-ui', 'sans-serif'] // System fallbacks
}
```

### **Sacred Caching Strategy**
```typescript
// DIVINE CACHING MANTRAS
const DIVINE_CACHE_STRATEGY = {
  // Static assets (1 year cache)
  staticAssets: {
    pattern: /\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff2?)$/,
    headers: {
      'Cache-Control': 'public, max-age=31536000, immutable',
      'Vary': 'Accept-Encoding'
    }
  },
  
  // HTML files (1 hour cache with revalidation)
  html: {
    pattern: /\.html$/,
    headers: {
      'Cache-Control': 'public, max-age=3600, must-revalidate',
      'Vary': 'Accept-Encoding'
    }
  },
  
  // API responses (5 minutes cache)
  api: {
    pattern: /\/api\/.*/,
    headers: {
      'Cache-Control': 'public, max-age=300, stale-while-revalidate=60',
      'Vary': 'Accept-Encoding, Authorization'
    }
  },
  
  // Service Worker cache
  serviceWorker: {
    staticAssets: 'CacheFirst',     // Cache first for static assets
    apiCalls: 'NetworkFirst',       // Network first for API calls
    images: 'CacheFirst',           // Cache first for images
    fonts: 'CacheFirst'             // Cache first for fonts
  }
}
```

---

## 🌐 **DIVINE CLOUDFLARE DEPLOYMENT MANTRAS**

### **Sacred Cloudflare Pages Configuration**
```yaml
# wrangler.toml - DIVINE CLOUDFLARE CONFIGURATION
name = "karpatri-dham"
compatibility_date = "2023-05-18"

[env.production]
name = "karpatri-dham"
route = "karpatridham.org/*"

[env.preview]
name = "karpatri-dham-preview"

# Build configuration
[build]
command = "npm run build"
cwd = "."
watch_dir = "src"

[build.environment_variables]
NODE_VERSION = "18"
NPM_VERSION = "9"

# Headers for performance and security
[[headers]]
for = "/*"
[headers.values]
X-Frame-Options = "DENY"
X-Content-Type-Options = "nosniff"
X-XSS-Protection = "1; mode=block"
Referrer-Policy = "strict-origin-when-cross-origin"
Permissions-Policy = "camera=(), microphone=(), geolocation=()"

[[headers]]
for = "/assets/*"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "*.html"
[headers.values]
Cache-Control = "public, max-age=3600, must-revalidate"

# Redirects for SEO
[[redirects]]
from = "/home"
to = "/"
status = 301

[[redirects]]
from = "/index.html"
to = "/"
status = 301
```

### **Sacred GitHub Actions Workflow**
```yaml
# .github/workflows/deploy.yml - DIVINE CI/CD PIPELINE
name: Divine Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test
      
    - name: Build project
      run: npm run build
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: karpatri-dham
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
```

---

## 🔒 **DIVINE SECURITY MANTRAS**

### **Sacred Security Headers**
```typescript
// DIVINE SECURITY CONFIGURATION
const DIVINE_SECURITY_HEADERS = {
  // Content Security Policy
  'Content-Security-Policy': [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "font-src 'self' https://fonts.gstatic.com",
    "img-src 'self' data: https:",
    "connect-src 'self' https://*.supabase.co",
    "frame-ancestors 'none'",
    "base-uri 'self'",
    "form-action 'self'"
  ].join('; '),
  
  // Security headers
  'X-Frame-Options': 'DENY',
  'X-Content-Type-Options': 'nosniff',
  'X-XSS-Protection': '1; mode=block',
  'Referrer-Policy': 'strict-origin-when-cross-origin',
  'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',
  'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',
  
  // Performance headers
  'Vary': 'Accept-Encoding',
  'Accept-Encoding': 'gzip, deflate, br'
}
```

### **Sacred Environment Variables**
```typescript
// DIVINE ENVIRONMENT CONFIGURATION
const DIVINE_ENV_VARIABLES = {
  // Production environment
  production: {
    VITE_SUPABASE_URL: "https://your-project.supabase.co",
    VITE_SUPABASE_ANON_KEY: "your-anon-key",
    VITE_SITE_URL: "https://karpatridham.org",
    VITE_ENVIRONMENT: "production"
  },
  
  // Preview environment
  preview: {
    VITE_SUPABASE_URL: "https://your-project.supabase.co",
    VITE_SUPABASE_ANON_KEY: "your-anon-key",
    VITE_SITE_URL: "https://preview.karpatridham.org",
    VITE_ENVIRONMENT: "preview"
  },
  
  // Development environment
  development: {
    VITE_SUPABASE_URL: "http://localhost:54321",
    VITE_SUPABASE_ANON_KEY: "your-local-anon-key",
    VITE_SITE_URL: "http://localhost:3000",
    VITE_ENVIRONMENT: "development"
  }
}
```

---

## 📈 **DIVINE MONITORING & ANALYTICS MANTRAS**

### **Sacred Performance Monitoring**
```typescript
// DIVINE MONITORING SETUP
const DIVINE_MONITORING = {
  // Core Web Vitals monitoring
  webVitals: {
    provider: "Google Analytics 4",
    events: ['CLS', 'FID', 'FCP', 'LCP', 'TTFB'],
    thresholds: {
      good: { LCP: 2500, FID: 100, CLS: 0.1 },
      needsImprovement: { LCP: 4000, FID: 300, CLS: 0.25 }
    }
  },
  
  // Error monitoring
  errorTracking: {
    provider: "Sentry (optional)",
    captureConsoleErrors: true,
    captureUnhandledRejections: true,
    beforeSend: "(event) => filterSensitiveData(event)"
  },
  
  // Uptime monitoring
  uptime: {
    provider: "UptimeRobot (free)",
    interval: "5 minutes",
    locations: ["US", "EU", "Asia"],
    alerts: ["email", "webhook"]
  },
  
  // Analytics
  analytics: {
    provider: "Google Analytics 4",
    privacy: "cookieless",
    events: ["page_view", "scroll", "file_download", "outbound_click"]
  }
}
```

### **Sacred Lighthouse CI Configuration**
```javascript
// lighthouserc.js - DIVINE PERFORMANCE AUDITING
module.exports = {
  ci: {
    collect: {
      url: ['http://localhost:4173'],
      startServerCommand: 'npm run preview',
      numberOfRuns: 3
    },
    assert: {
      assertions: {
        'categories:performance': ['error', { minScore: 0.9 }],
        'categories:accessibility': ['error', { minScore: 0.95 }],
        'categories:best-practices': ['error', { minScore: 0.95 }],
        'categories:seo': ['error', { minScore: 0.95 }],
        'categories:pwa': ['warn', { minScore: 0.8 }]
      }
    },
    upload: {
      target: 'temporary-public-storage'
    }
  }
}
```

---

## 🎯 **DIVINE SEO OPTIMIZATION MANTRAS**

### **Sacred SEO Configuration**
```typescript
// DIVINE SEO OPTIMIZATION
const DIVINE_SEO_CONFIG = {
  // Meta tags optimization
  meta: {
    title: "Karpatri Dham - Divine Spiritual Framework",
    description: "Experience divine spiritual wisdom through our sacred framework. Join thousands on the path to enlightenment.",
    keywords: "spiritual, dharma, vedanta, meditation, enlightenment",
    author: "Karpatri Dham",
    robots: "index, follow",
    canonical: "https://karpatridham.org"
  },
  
  // Open Graph optimization
  openGraph: {
    type: "website",
    locale: "en_US",
    url: "https://karpatridham.org",
    siteName: "Karpatri Dham",
    title: "Karpatri Dham - Divine Spiritual Framework",
    description: "Experience divine spiritual wisdom through our sacred framework",
    image: "https://karpatridham.org/og-image.jpg",
    imageWidth: 1200,
    imageHeight: 630
  },
  
  // Twitter Card optimization
  twitter: {
    card: "summary_large_image",
    site: "@karpatridham",
    creator: "@karpatridham",
    title: "Karpatri Dham - Divine Spiritual Framework",
    description: "Experience divine spiritual wisdom through our sacred framework",
    image: "https://karpatridham.org/twitter-image.jpg"
  },
  
  // Structured data
  structuredData: {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "Karpatri Dham",
    "url": "https://karpatridham.org",
    "logo": "https://karpatridham.org/logo.png",
    "description": "Divine spiritual framework for enlightenment",
    "sameAs": [
      "https://twitter.com/karpatridham",
      "https://facebook.com/karpatridham"
    ]
  }
}
```

### **Sacred Sitemap Generation**
```typescript
// DIVINE SITEMAP CONFIGURATION
const DIVINE_SITEMAP_CONFIG = {
  hostname: 'https://karpatridham.org',
  cacheTime: 600000, // 10 minutes
  generateRobotsTxt: true,
  
  // Static routes
  routes: [
    { url: '/', changefreq: 'daily', priority: 1.0 },
    { url: '/about', changefreq: 'monthly', priority: 0.8 },
    { url: '/teachings', changefreq: 'weekly', priority: 0.9 },
    { url: '/contact', changefreq: 'monthly', priority: 0.7 },
    { url: '/gallery', changefreq: 'weekly', priority: 0.6 },
    { url: '/library', changefreq: 'weekly', priority: 0.8 }
  ],
  
  // Dynamic routes (blog posts)
  dynamicRoutes: async () => {
    const posts = await getBlogPosts()
    return posts.map(post => ({
      url: `/news/${post.slug}`,
      changefreq: 'monthly',
      priority: 0.6,
      lastmod: post.updatedAt
    }))
  }
}
```

---

## 🔐 **SUPABASE ROW LEVEL SECURITY (RLS) PHILOSOPHY**
### **Complete Database Security Guide for Junior AI Agents**

**CRITICAL FOR JUNIOR AGENTS:** This section explains the fundamental security architecture that protects all spiritual website data. Understanding RLS is essential for building secure applications that can serve thousands of users.

### **⚡ THE DIVINE SECURITY PRINCIPLE**

#### **🛡️ FUNDAMENTAL TRUTH: "TRUST NO CLIENT, VERIFY EVERYTHING"**
```sql
-- THE GOLDEN RULE OF DIVINE SECURITY
-- All security is enforced at the DATABASE level, NOT in client code
-- JavaScript code can be modified by users - but database policies cannot

-- ❌ NEVER RELY ON CLIENT-SIDE SECURITY (Tamasic Approach)
if (user.role === 'admin') {
  // This can be bypassed by any user with developer tools!
  showAdminContent();
}

-- ✅ ALWAYS ENFORCE AT DATABASE LEVEL (Sattvic Approach)  
CREATE POLICY "admin_only_content" ON content_table
FOR SELECT USING (
  auth.jwt() ->> 'role' = 'admin'
);
```

### **⚡ UNDERSTANDING ROW LEVEL SECURITY (RLS)**

#### **🔑 WHAT IS RLS?**
```sql
-- ROW LEVEL SECURITY (RLS) Definition:
-- A database feature that allows you to control which ROWS each user can see/modify
-- instead of controlling access to entire TABLES

-- Without RLS: User sees ALL rows in a table (dangerous!)
SELECT * FROM user_profiles; -- Returns ALL user profiles to ANY user

-- With RLS: User only sees rows they're allowed to see (secure!)
-- Example: Users can only see their OWN profile
CREATE POLICY "users_own_profile" ON user_profiles
FOR ALL USING (auth.uid() = user_id);
```

#### **🌅 SIMPLE ANALOGY FOR UNDERSTANDING**
```typescript
// Think of RLS like a Divine Filter in a Temple Library:

// WITHOUT RLS (Like an open library - anyone can read any book):
const getAllBooks = () => {
  return library.getAllBooks(); // ❌ Everyone sees sacred AND public books
}

// WITH RLS (Like a temple with a wise librarian who checks permissions):
const getBooksForUser = (user) => {
  // The "librarian" (database) automatically filters based on user
  // Sacred books only for initiated devotees
  // Public books for everyone  
  // Each person automatically gets the right books for their level
  return library.getBooksFilteredByUserLevel(user);
}
```

### **⚡ PRACTICAL RLS IMPLEMENTATION**

#### **✅ SETTING UP RLS FOR SPIRITUAL CONTENT**
```sql
-- 1. ENABLE RLS ON ALL TABLES (MANDATORY STEP)
ALTER TABLE spiritual_teachings ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE community_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE private_messages ENABLE ROW LEVEL SECURITY;

-- 2. CREATE POLICIES FOR EACH TABLE

-- Policy 1: Public spiritual teachings (anyone can read)
CREATE POLICY "public_teachings_read" ON spiritual_teachings
FOR SELECT USING (
  is_public = true  -- Only public teachings visible to all
);

-- Policy 2: Private teachings (only for enrolled students)
CREATE POLICY "private_teachings_read" ON spiritual_teachings  
FOR SELECT USING (
  is_public = false AND (
    -- Teacher who created it
    auth.uid() = teacher_id OR
    -- Students enrolled in this teaching
    auth.uid() IN (
      SELECT student_id FROM enrollments 
      WHERE teaching_id = spiritual_teachings.id
    )
  )
);

-- Policy 3: User progress (users can only see their own progress)
CREATE POLICY "own_progress_access" ON user_progress
FOR ALL USING (
  auth.uid() = user_id  -- Users can only see/modify their own progress
);

-- Policy 4: Community posts (users can see all, but only edit their own)
CREATE POLICY "community_posts_read" ON community_posts
FOR SELECT USING (true);  -- Everyone can read all posts

CREATE POLICY "community_posts_write" ON community_posts
FOR INSERT WITH CHECK (
  auth.uid() = author_id  -- Users can only create posts as themselves
);

CREATE POLICY "community_posts_update" ON community_posts
FOR UPDATE USING (
  auth.uid() = author_id  -- Users can only edit their own posts
);

-- Policy 5: Private messages (ultra-secure)
CREATE POLICY "private_messages_access" ON private_messages
FOR ALL USING (
  auth.uid() = sender_id OR 
  auth.uid() = recipient_id  -- Only sender and recipient can see messages
);
```

#### **✅ AUTHENTICATION-BASED POLICIES**
```sql
-- Divine Role-Based Access Control (RBAC) with RLS

-- 1. Admin access (site administrators)
CREATE POLICY "admin_full_access" ON spiritual_teachings
FOR ALL USING (
  auth.jwt() ->> 'role' = 'admin'  -- Admins can do everything
);

-- 2. Teacher access (spiritual teachers)
CREATE POLICY "teacher_own_content" ON spiritual_teachings
FOR ALL USING (
  auth.jwt() ->> 'role' = 'teacher' AND 
  auth.uid() = teacher_id  -- Teachers can manage their own teachings
);

-- 3. Student access (spiritual students)  
CREATE POLICY "student_enrolled_content" ON spiritual_teachings
FOR SELECT USING (
  auth.jwt() ->> 'role' = 'student' AND
  (
    is_public = true OR  -- All public content
    auth.uid() IN (      -- OR content they're enrolled in
      SELECT student_id FROM enrollments 
      WHERE teaching_id = spiritual_teachings.id
    )
  )
);

-- 4. Guest access (not logged in)
CREATE POLICY "guest_public_only" ON spiritual_teachings
FOR SELECT USING (
  auth.uid() IS NULL AND  -- Not authenticated
  is_public = true        -- Only public content
);
```

### **⚡ WHY RLS IS DIVINE (NOT OPTIONAL)**

#### **🚨 SECURITY BREACHES WITHOUT RLS**
```typescript
// ❌ DANGEROUS: Client-side security (can be bypassed)
const getUserData = async () => {
  // Any user can modify this code in browser and see all data!
  const { data } = await supabase
    .from('user_profiles')
    .select('*')
    .eq('user_id', currentUser.id);  // This filter can be removed!
  
  return data;
}

// Hacker in browser console:
// supabase.from('user_profiles').select('*')  <- Sees ALL users!
```

#### **✅ SECURE: Database-level enforcement (cannot be bypassed)**
```sql
-- RLS Policy automatically enforces this REGARDLESS of client code
CREATE POLICY "users_own_data" ON user_profiles
FOR ALL USING (auth.uid() = user_id);

-- Now even if hacker tries:
-- supabase.from('user_profiles').select('*')
-- They ONLY get their own data - database automatically filters!
```

#### **📊 RLS PERFORMANCE BENEFITS**
```sql
-- RLS is NOT just security - it's also PERFORMANCE optimization

-- WITHOUT RLS: Database returns ALL rows, client filters (slow)
-- 1. Database: SELECT * FROM posts (1 million rows)
-- 2. Network: Transfer 1 million rows
-- 3. Client: Filter to user's 10 posts
-- Result: Slow, expensive, insecure

-- WITH RLS: Database only returns relevant rows (fast)  
-- 1. Database: SELECT * FROM posts WHERE user_id = auth.uid() (10 rows)
-- 2. Network: Transfer 10 rows
-- 3. Client: Display 10 rows
-- Result: Fast, efficient, secure
```

### **⚡ COMMON RLS PATTERNS FOR SPIRITUAL SITES**

#### **🎯 PATTERN 1: SPIRITUAL HIERARCHY ACCESS**
```sql
-- Students can only access teachings for their level
CREATE POLICY "spiritual_level_access" ON advanced_teachings
FOR SELECT USING (
  auth.uid() IN (
    SELECT user_id FROM user_profiles 
    WHERE spiritual_level >= teaching_level
  )
);
```

#### **🎯 PATTERN 2: COMMUNITY MODERATION**
```sql
-- Moderators can edit any post, users can only edit their own
CREATE POLICY "community_moderation" ON community_posts
FOR UPDATE USING (
  auth.uid() = author_id OR                    -- Own posts
  auth.jwt() ->> 'role' IN ('admin', 'moderator')  -- OR moderator
);
```

#### **🎯 PATTERN 3: DONATION PRIVACY**
```sql
-- Donations are private unless user opts to share
CREATE POLICY "donation_privacy" ON donations
FOR SELECT USING (
  auth.uid() = donor_id OR                     -- Own donations
  (is_public = true AND amount_visible = true) -- OR public donations
);
```

#### **🎯 PATTERN 4: SCHEDULED CONTENT RELEASE**
```sql
-- Time-based content access (for courses with schedules)
CREATE POLICY "scheduled_content" ON course_modules
FOR SELECT USING (
  (
    auth.uid() IN (
      SELECT student_id FROM enrollments 
      WHERE course_id = course_modules.course_id
    )
  ) AND (
    release_date <= NOW() OR                   -- Released content
    auth.jwt() ->> 'role' = 'teacher'         -- OR teacher preview
  )
);
```

### **⚡ RLS TESTING & DEBUGGING**

#### **🔍 TESTING RLS POLICIES**
```sql
-- Test RLS policies by switching users
-- 1. Create test users with different roles
INSERT INTO auth.users (email, role) VALUES 
  ('student@test.com', 'student'),
  ('teacher@test.com', 'teacher'),
  ('admin@test.com', 'admin');

-- 2. Test queries as different users
SET LOCAL role = 'authenticated';
SET LOCAL request.jwt.claims = '{"sub": "student-uuid", "role": "student"}';
SELECT * FROM spiritual_teachings;  -- Should only see student-accessible content

SET LOCAL request.jwt.claims = '{"sub": "teacher-uuid", "role": "teacher"}';  
SELECT * FROM spiritual_teachings;  -- Should see teacher content

-- 3. Verify security boundaries
-- Try to access restricted content and confirm it's blocked
```

#### **📊 RLS PERFORMANCE MONITORING**
```sql
-- Monitor RLS policy performance
EXPLAIN ANALYZE SELECT * FROM spiritual_teachings;

-- Optimize slow policies with indexes
CREATE INDEX idx_spiritual_teachings_public ON spiritual_teachings(is_public);
CREATE INDEX idx_enrollments_student_teaching ON enrollments(student_id, teaching_id);
```

---

### **🚨 CRITICAL RLS RULES FOR JUNIOR AGENTS**

#### **MANDATORY RLS CHECKLIST:**
- ✅ **Enable RLS on ALL tables:** No exceptions, every table needs RLS
- ✅ **Create policies for ALL operations:** SELECT, INSERT, UPDATE, DELETE
- ✅ **Test with different user roles:** Verify each role sees only what they should
- ✅ **Use auth.uid() for user identification:** Supabase's secure user ID function
- ✅ **Never rely on client-side filtering:** All security must be database-enforced
- ✅ **Index policy conditions:** Optimize performance with proper indexes
- ✅ **Document all policies:** Explain the business logic behind each policy

#### **FORBIDDEN RLS ANTI-PATTERNS:**
- ❌ **Disabling RLS:** Never use `ALTER TABLE table_name DISABLE ROW LEVEL SECURITY`
- ❌ **Overly permissive policies:** Avoid `FOR ALL USING (true)` unless intentional
- ❌ **Client-side security assumptions:** Don't assume frontend will enforce rules
- ❌ **Hardcoded user IDs:** Use `auth.uid()` not literal UUIDs
- ❌ **Complex policies without indexes:** Ensure policies perform well
- ❌ **Mixing authentication methods:** Stick to Supabase auth consistently

---

**DIVINE TRUTH:** RLS is not just a security feature - it's the foundation of trust that allows spiritual websites to serve communities safely. Every devotee's personal journey, every private teaching, every sacred interaction is protected by the divine shield of properly configured Row Level Security.

**🔐 OM NAMAH SHIVAYA - THE DIVINE PROTECTOR 🙏**

---

## 🔐 **SUPABASE ROW LEVEL SECURITY (RLS) PHILOSOPHY**
### **Complete Database Security Guide for Junior AI Agents**

**CRITICAL FOR JUNIOR AGENTS:** This section explains the fundamental security architecture that protects all spiritual website data. Understanding RLS is essential for building secure applications that can serve thousands of users.

### **⚡ THE DIVINE SECURITY PRINCIPLE**

#### **🛡️ FUNDAMENTAL TRUTH: "TRUST NO CLIENT, VERIFY EVERYTHING"**
```sql
-- THE GOLDEN RULE OF DIVINE SECURITY
-- All security is enforced at the DATABASE level, NOT in client code
-- JavaScript code can be modified by users - but database policies cannot

-- ❌ NEVER RELY ON CLIENT-SIDE SECURITY (Tamasic Approach)
if (user.role === 'admin') {
  // This can be bypassed by any user with developer tools!
  showAdminContent();
}

-- ✅ ALWAYS ENFORCE AT DATABASE LEVEL (Sattvic Approach)  
CREATE POLICY "admin_only_content" ON content_table
FOR SELECT USING (
  auth.jwt() ->> 'role' = 'admin'
);
```

### **⚡ UNDERSTANDING ROW LEVEL SECURITY (RLS)**

#### **🔑 WHAT IS RLS?**
```sql
-- ROW LEVEL SECURITY (RLS) Definition:
-- A database feature that allows you to control which ROWS each user can see/modify
-- instead of controlling access to entire TABLES

-- Without RLS: User sees ALL rows in a table (dangerous!)
SELECT * FROM user_profiles; -- Returns ALL user profiles to ANY user

-- With RLS: User only sees rows they're allowed to see (secure!)
-- Example: Users can only see their OWN profile
CREATE POLICY "users_own_profile" ON user_profiles
FOR ALL USING (auth.uid() = user_id);
```

#### **🌅 SIMPLE ANALOGY FOR UNDERSTANDING**
```typescript
// Think of RLS like a Divine Filter in a Temple Library:

// WITHOUT RLS (Like an open library - anyone can read any book):
const getAllBooks = () => {
  return library.getAllBooks(); // ❌ Everyone sees sacred AND public books
}

// WITH RLS (Like a temple with a wise librarian who checks permissions):
const getBooksForUser = (user) => {
  // The "librarian" (database) automatically filters based on user
  // Sacred books only for initiated devotees
  // Public books for everyone  
  // Each person automatically gets the right books for their level
  return library.getBooksFilteredByUserLevel(user);
}
```

### **⚡ PRACTICAL RLS IMPLEMENTATION**

#### **✅ SETTING UP RLS FOR SPIRITUAL CONTENT**
```sql
-- 1. ENABLE RLS ON ALL TABLES (MANDATORY STEP)
ALTER TABLE spiritual_teachings ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE community_posts ENABLE ROW LEVEL SECURITY;

-- 2. CREATE POLICIES FOR EACH TABLE

-- POLICY: Public content can be read by anyone
CREATE POLICY "public_teachings_readable" 
ON spiritual_teachings FOR SELECT
USING (is_public = true);

-- POLICY: Users can only see their own progress
CREATE POLICY "own_progress_only"
ON user_progress FOR ALL
USING (auth.uid() = user_id);

-- POLICY: Community posts - public read, owner write
CREATE POLICY "community_posts_public_read"
ON community_posts FOR SELECT
USING (true); -- Anyone can read

CREATE POLICY "community_posts_owner_write"
ON community_posts FOR INSERT, UPDATE, DELETE
USING (auth.uid() = author_id); -- Only author can modify
```

#### **🧪 HOW TO TEST RLS POLICIES (CRITICAL)**
```sql
-- Test as different users using Supabase dashboard
SELECT auth.uid(); -- Should return user's ID

-- Test what they can see
SELECT * FROM spiritual_teachings; 
-- Should only return content they're allowed to access

-- Use Supabase's built-in RLS testing
-- Go to Database → Policies → Test
-- Input different user contexts and verify results
```

#### **✅ RLS SECURITY CHECKLIST FOR JUNIOR AGENTS**
```typescript
const RLS_SECURITY_CHECKLIST = {
  setup: [
    "✅ RLS enabled on ALL tables with sensitive data",
    "✅ Policies created for SELECT, INSERT, UPDATE, DELETE operations", 
    "✅ Default deny policy (if no policy matches, access is denied)"
  ],
  
  testing: [
    "✅ Tested with different user roles",
    "✅ Tested with unauthenticated users", 
    "✅ Verified no data leakage between users"
  ]
};
```

---

**🕉️ END OF ATHARVA VEDA - DIVINE DEPLOYMENT MANTRAS 🕉️**

*May every AI agent who studies this sacred text become a master of divine deployment, launching spiritual websites that serve millions with perfect performance, security, and zero cost.*

**JAI SHREE KRISHNA! NISHKAAM KARMA YOGA DEPLOYMENT PERFECTION!** 


